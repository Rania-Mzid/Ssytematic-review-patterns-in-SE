@article{bensaidDesignPatternsSelfAdaptive2014,
  title = {Design {{Patterns}} for {{Self-Adaptive RTE Systems Specification}}},
  author = {Ben Said, Mouna and Hadj Kacem, Yessine and Kerboeuf, Micka{\"e}l and Ben Amor, Nader and Abid, Mohamed},
  year = {2014},
  journal = {International Journal of Reconfigurable Computing},
  volume = {2014},
  pages = {1--21},
  issn = {1687-7195, 1687-7209},
  doi = {10.1155/2014/536362},
  abstract = {The development of self-adaptive real-time embedded (RTE) systems is an increasingly hard task due to the growing complexity of both hardware and software and the high variability of the execution environment. Different approaches, platforms, and middleware have been proposed in the field, from low to high abstraction level. However, there is still a lack of generic and reusable designs for self-adaptive RTE systems that fit different system domains, lighten designers' task, and decrease development cost. In this paper, we propose five design patterns for self-adaptive RTE systems modeling resulting from the generalization of relevant existing adaptation-related works. Combined together, the patterns form the design of an adaptation loop composed of five adaptation modules. The proposed solution offers a modular, reusable, and flexible specification of these modules and enables the separation of concerns. It also permits dealing with concurrency, real-time features, and adaptation cost relative to the adaptation activities. To validate our solution, we applied it to a complex case study, a cross-layer self-adaptive object tracking system, to show patterns utilization and prove the solution benefits.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\INL8UPTY\\Ben Said et al. - 2014 - Design Patterns for Self-Adaptive RTE Systems Spec.pdf}
}

@article{bensaidMDEbasedApproachSelfadaptive2020,
  title = {An {{MDE-based}} Approach for Self-Adaptive {{RTES}} Model Generation},
  author = {Ben Said, Mouna and Hadj Kacem, Yessine and Kerboeuf, Micka{\"e}l and Abid, Mohamed},
  year = {2020},
  month = jun,
  journal = {Cluster Computing},
  volume = {23},
  number = {2},
  pages = {925--951},
  issn = {1386-7857, 1573-7543},
  doi = {10.1007/s10586-019-02968-4},
  abstract = {Raising the design abstraction level has been, since many years, a prominent solution to decrease the complexity of selfadaptive real time embedded systems (RTES) and increase productivity. However, the manual specification and integration of the adaptive behavior into the system model is still presenting a big handicap for designers. There is a lack of Computer Aided Software Engineering tools and methodologies that permit to automate the generation of self-adaptive RTES models. Therefore, designers need an expertise in the adaptation domain as well as the modeling language and much time for manual work. At the aim of solving these problems, we propose, in this paper, a Model Driven Engineering based approach that permits to guide the automatic transformation of a classic Y-chart RTES model into a self-adaptive model based on design patterns. A model-based interactive process is developed to enable the generation of self-adaptive models for RTES based on the instantiation, integration and specialization of design patterns. The generated system model is then mapped to the input of a simulation platform in order to perform the non-functional properties verification and simulate the system reconfiguration, if needed. The proposed approach is tested and validated through a case study of an embedded video conferencing system which is CPU and network bandwidth-constrained.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\7NGL3HZN\\Ben Said et al. - 2020 - An MDE-based approach for self-adaptive RTES model.pdf}
}

@inproceedings{bouazizApplyingSecurityPatterns2012,
  title = {Applying {{Security Patterns}} for {{Component Based Applications Using UML Profile}}},
  booktitle = {2012 {{IEEE}} 15th {{International Conference}} on {{Computational Science}} and {{Engineering}}},
  author = {Bouaziz, Rahma and Coulette, Bernard},
  year = {2012},
  month = dec,
  pages = {186--193},
  publisher = {{IEEE}},
  address = {{Paphos, Cyprus}},
  doi = {10.1109/ICCSE.2012.104},
  abstract = {Today's systems require a higher consideration for non functional requirements as security and dependability. Developers have to handle these requirements during software development lifecycle. To provide developers with security guidelines, security patterns were proposed. These patterns are a collection of experts' security knowledge and a good solution to convey security concepts. In order to encourage developers to take advantage from security solutions proposed by security patterns, we think that it is necessary to provide an appropriate mechanism to implement those patterns using UML profiles. In this paper, we propose a structured UML profiles construction process based on security patterns. An illustration of the proposed process is provided using the ``active replication'' pattern. A case study of GPS system is also provided to demonstrate the application of generated UML profile using the proposed process.},
  isbn = {978-1-4673-5165-2 978-0-7695-4914-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\KK54BYHL\\Bouaziz et Coulette - 2012 - Applying Security Patterns for Component Based App.pdf}
}

@inproceedings{bouazizEngineeringProcessSecurity2013,
  title = {An {{Engineering Process}} for {{Security Patterns Application}} in {{Component Based Models}}},
  booktitle = {2013 {{Workshops}} on {{Enabling Technologies}}: {{Infrastructure}} for {{Collaborative Enterprises}}},
  author = {Bouaziz, Rahma and Kallel, Slim and Coulette, Bernard},
  year = {2013},
  month = jun,
  pages = {231--236},
  publisher = {{IEEE}},
  address = {{Hammamet, Tunisia}},
  doi = {10.1109/WETICE.2013.27},
  abstract = {Security engineering with patterns is currently a very active area of research. Security patterns \'i an adaptation of Design Patterns to security \textendash{} capture experts' experience in order to solve recurrent security problems in a structured and reusable way. In this paper, our objective is to describe an engineering process, called SCRIP (SeCurity patteRn Integration Process), which provides guidelines for integrating security patterns into component-based models. SCRIP defines activities and products to integrate security patterns in the whole development process, from UML component modeling until aspect code generation. The definition of SCRIP has been made using the OMG standard Software and System Process Engineering Meta-model (SPEM). We are developing a CASE tool to support that process.},
  isbn = {978-1-4799-0405-1},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\J9NQ8HSG\\Bouaziz et al. - 2013 - An Engineering Process for Security Patterns Appli.pdf}
}

@article{favreImprovingMDAbasedProcess,
  title = {Improving {{MDA-based Process Quality}} through {{Refactoring Patterns}}},
  author = {Favre, Liliana and Pereira, Claudia},
  pages = {7},
  abstract = {The Model Driven Architecture (MDA) is an initiative proposed by the Object Management Group (OMG) that advocates modeling system from computation independent, platform independent, platform specific and implementation specific models. MDA is also based on the concepts of metamodel, automatic transformation and traceability. A crucial part of the evolution from abstract models to executable components or applications is accomplished by means of refactoring. In this paper we propose a refactoring specification based on patterns and metamodeling techniques. We describe foundations for MDA-based refactoring that allow extending the functionality of the existing CASE tools in order to improve the MDA-based process quality.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\UN5T2WE2\\Favre et Pereira - Improving MDA-based Process Quality through Refact.pdf}
}

@article{fukayaDesignPatternDetection,
  title = {Design {{Pattern Detection Using Source Code}} of {{Before Applying Design Patterns}}},
  author = {Fukaya, Kazuhiro and Kubo, Atsuto and Washizaki, Hironori and Fukazawa, Yoshiaki},
  pages = {3},
  abstract = {We propose an approach of design pattern detection using source-code of before the application of the design pattern. Our approach is able to distinguish different design patterns with similar structures, and help maintainers understand the design of the program more accurately. Moreover, our technique reveals when and where the target pattern has been applied. It is useful to assess what kinds of patterns increase what kinds of quality characteristics.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\IT8PP3W9\\Fukaya et al. - Design Pattern Detection Using Source Code of Befo.pdf}
}

@article{fushidaMethodInvestigateSoftware,
  title = {A {{Method}} to {{Investigate Software Evolutions Using Design Pattern Detection Tool}}},
  author = {Fushida, Kyohei and Kawaguchi, Shinji and Iida, Hajimu},
  pages = {6},
  abstract = {In software designing, design patterns are expected to help for implementing with clear design intention with higher quality. However, selecting appropriate patterns is not simple task, and design patterns are sometimes deployed exploratory without properly defined process. In order to clarify design patterns' contribution to the quality and productivity, it is very important to investigate design pattern usage among the series of revisions over the time.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\L8KQC6I9\\Fushida et al. - A Method to Investigate Software Evolutions Using .pdf}
}

@book{gammaDesignPatternsElements1995,
  title = {Design Patterns: Elements of Reusable Object-Oriented Software},
  author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Johnson, Ralph E and Vlissides, John},
  year = {1995},
  publisher = {{Pearson Deutschland GmbH}},
  isbn = {0-201-63361-2}
}

@article{gaudelCompositionDesignPatterns2014,
  title = {Composition of Design Patterns: From the Modeling of {{RTOS}} Synchronization Tools to Schedulability Analysis},
  shorttitle = {Composition of Design Patterns},
  author = {Gaudel, Vincent and Singhoff, Frank and Plantec, Alain and Dissaux, Pierre and Legrand, J{\'e}r{\^o}me},
  year = {2014},
  month = feb,
  journal = {ACM SIGBED Review},
  volume = {11},
  number = {1},
  pages = {44--49},
  issn = {1551-3688},
  doi = {10.1145/2597457.2597463},
  abstract = {This article deals with performance verification of architecture models of real-time embedded systems. We investigate scheduling analysis of multi-tasks applications running on real-time operating systems (RTOS in this article). Scheduling analysis on these types of system can be performed with the real-time scheduling theory, but applying it is a complicated task. To allow designer to automatically apply this theory, we propose several architectural design patterns. Each architectural design pattern models a classical task synchronization or communication protocol available in RTOSes. In this article, we focus on those design patterns composition. We show how to compose the proposed design patterns and how scheduling analysis can be run with them.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\KJCHZ55G\\Gaudel et al. - 2014 - Composition of design patterns from the modeling .pdf}
}

@inproceedings{gomaaReusableComponentInterconnection2001,
  title = {Reusable Component Interconnection Patterns for Distributed Software Architectures},
  booktitle = {Proceedings of the 2001 Symposium on {{Software}} Reusability Putting Software Reuse in Context - {{SSR}} '01},
  author = {Gomaa, Hassan and Menasc{\'e}, Daniel A. and Shin, Michael E.},
  year = {2001},
  pages = {69--77},
  publisher = {{ACM Press}},
  address = {{Toronto, Ontario, Canada}},
  doi = {10.1145/375212.375252},
  abstract = {This paper investigates the design of reusable component interconnection in client/server systems. In particular, the paper describes the design of component interconnection patterns, which define and encapsulate the way client and server components communicate with each other. This paper uses the Unified Modeling Language (UML) to describe the component interconnection patterns for synchronous, asynchronous, and brokered communication. When designing a new distributed application, the appropriate component interaction patterns may then be selected and reused.},
  isbn = {978-1-58113-358-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\SJNWX3IW\\Gomaa et al. - 2001 - Reusable component interconnection patterns for di.pdf}
}

@article{jawawiSoftwareReuseMobile2007,
  title = {Software {{Reuse}} for {{Mobile Robot Applications Through Analysis Patterns}}},
  author = {Jawawi, Dayang and Deris, Safaai and Mamat, Rosbi},
  year = {2007},
  volume = {4},
  number = {3},
  pages = {9},
  abstract = {Software analysis pattern is an approach of software reuse which provides a way to reuse expertise that can be used across domains at early level of development. Developing software for a mobile robot system involves multi-disciplines expert knowledge which includes embedded systems, real-time software issues, control theories and artificial intelligence aspects. This paper focuses on analysis patterns as a means to facilitate mobile robot software knowledge reuse by capturing conceptual models in those domains in order to allow reuse across applications. The use of software analysis patterns as a means to facilitate Autonomous Mobile Robots (AMR) software knowledge reuse through component-based software engineering is proposed. The software analysis patterns for AMR were obtained through a pattern mining process, and documented using a standard catalogue template. These analysis patterns are categorized according to hybrid deliberate layered architecture of robot software: Reactive layer, supervisor layer and deliberative layer. Particularly, the analysis patterns in the reactive layer are highlighted and presented. The deployment of the analysis patterns are illustrated and discussed using an AMR software case study. To verify the existence of the pattern in AMR systems, pattern-based reverse engineering was performed on two existing AMR systems. The reuse potential of these patterns is evaluated by measuring the reusability of components in the analysis patterns.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\5H54K5AX\\Jawawi et al. - 2007 - Software Reuse for Mobile Robot Applications Throu.pdf}
}

@incollection{kajsaDesignPatternsInstantiation2010,
  title = {Design {{Patterns Instantiation Based}} on {{Semantics}} and {{Model Transformations}}},
  booktitle = {{{SOFSEM}} 2010: {{Theory}} and {{Practice}} of {{Computer Science}}},
  author = {Kajsa, Peter and Majt{\'a}s, L'ubom{\'i}r},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and {van Leeuwen}, Jan and Muscholl, Anca and Peleg, David and Pokorn{\'y}, Jaroslav and Rumpe, Bernhard},
  year = {2010},
  volume = {5901},
  pages = {540--551},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-11266-9_45},
  abstract = {Design patterns provide generalized and verified solutions of nontrivial design problems. The application of patterns improves the quality of software design considerably. This paper presents a method of design pattern application support in software projects. The method reduces problems found in traditional tools and contributes to design pattern instantiation at more levels of abstraction. The elaborated method is based on semantics defined via UML profile and transformations of models. Semantics defined via UML profile support specialization of pattern instances and model transformations support and automate the concretization of design pattern instances. The method supports the variation and customization of design patterns and also puts into practice ideas of model driven, iterative and incremental development of software systems. Moreover, the transformation of models is driven by models of design patterns. So the method is not limited only to design pattern support but also provides technique for the creation and addition of support of another custom model structures which are often created in models mechanically.},
  isbn = {978-3-642-11265-2 978-3-642-11266-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\6RKYD4L3\\Kajsa et Majtás - 2010 - Design Patterns Instantiation Based on Semantics a.pdf}
}

@article{keutzerDesignPatternLanguage,
  title = {A Design Pattern Language for Engineering (Parallel) Software: Merging the {{PLPP}} and {{OPL}} Projects},
  author = {Keutzer, Kurt and Massingill, Berna L and Mattson, Timothy G and Sanders, Beverly A},
  pages = {8},
  abstract = {Parallel programming is stuck. To make progress, we need to step back and understand the software people wish to engineer. We do this with a design pattern language. This paper provides background for a lively discussion of this pattern language. We present the context for the problem, the layers in the design pattern language, and descriptions of the patterns themselves.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\BTDKBYHM\\Keutzer et al. - A design pattern language for engineering (paralle.pdf}
}

@article{konradObjectAnalysisPatterns2004,
  title = {Object Analysis Patterns for Embedded Systems},
  author = {Konrad, S. and Cheng, B.H.C. and Campbell, L.A.},
  year = {2004},
  month = dec,
  journal = {IEEE Transactions on Software Engineering},
  volume = {30},
  number = {12},
  pages = {970--992},
  issn = {0098-5589},
  doi = {10.1109/TSE.2004.102},
  abstract = {Some of the most challenging tasks in building a software system are capturing, refining, and analyzing requirements. How well these tasks are performed significantly impacts the quality of the developed software system. The difficulty of these tasks is greatly exacerbated for the software of embedded systems as these systems are commonly used for critical applications, have to operate reliably for long periods of time, and usually have a high degree of complexity. Current embedded systems software development practice, however, often deals with the (requirements) analysis phase in a superficial manner, instead emphasizing design and implementation. This research investigates how an approach similar to the well-known design patterns, termed object analysis patterns, can be applied in the analysis phase of embedded systems development, prior to design and coding. Specifically, our research explores how object-oriented modeling notations, such as the Unified Modeling Language (UML), can be used to represent structural and behavioral information as part of commonly occurring object analysis patterns. This work also investigates how UML-based conceptual models of embedded systems, based on the diagram templates in the object analysis patterns, can be automatically analyzed using the Spin model checker for adherence to properties specified in linear-time temporal logic (LTL) using a previously developed UML formalization framework. We have applied these patterns to several embedded systems applications obtained from the automotive industry. This paper describes one of our case studies and illustrates how our approach facilitates the construction of UML-based conceptual models of embedded systems and the analysis of these models for adherence to functional requirements.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\KUVKXYXT\\Konrad et al. - 2004 - Object analysis patterns for embedded systems.pdf}
}

@article{magdichDesignPatternbasedApproach2018,
  title = {A Design Pattern-Based Approach for Automatic Choice of Semi-Partitioned and Global Scheduling Algorithms},
  author = {Magdich, Amina and Hadj Kacem, Yessine and Kerboeuf, Micka{\"e}l and Mahfoudhi, Adel and Abid, Mohamed},
  year = {2018},
  month = may,
  journal = {Information and Software Technology},
  volume = {97},
  pages = {83--98},
  issn = {09505849},
  doi = {10.1016/j.infsof.2018.01.002},
  abstract = {Context: Because of the ever growing complexity of Real-Time Embedded Systems (RTES) coupled with the variety of scheduling approaches and algorithms, the scheduling step has become more challenging mainly for new designers. In particular, the choice of the appropriate scheduling algorithm for a RTES is a hard step that requires vast knowledge and expertise of the scheduling field. Therefore, there is still a need for directives and guidelines to assist designers while choosing the appropriate scheduling algorithm to avoid system failures. In this respect, some approaches were proposed to deal with automatic scheduling. However, only the partitioned scheduling approach which prevents task migration was supported.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\C8EXK53A\\Magdich et al. - 2018 - A design pattern-based approach for automatic choi.pdf}
}

@incollection{magdichRealTimeDesignPatterns2015,
  title = {Real-{{Time Design Patterns}}: {{Architectural Designs}} for {{Automatic Semi-Partitioned}} and {{Global Scheduling}}},
  shorttitle = {Real-{{Time Design Patterns}}},
  booktitle = {Enterprise, {{Business-Process}} and {{Information Systems Modeling}}},
  author = {Magdich, Amina and Hadj Kacem, Yessine and Mahfoudhi, Adel and Kerboeuf, Micka{\"e}l and Abid, Mohamed},
  editor = {Gaaloul, Khaled and Schmidt, Rainer and Nurcan, Selmin and Guerreiro, S{\'e}rgio and Ma, Qin},
  year = {2015},
  volume = {214},
  pages = {447--460},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-19237-6_28},
  abstract = {The scheduling problem is becoming an important topic for different fields especially for Real-Time applications. Considering the complexity of Real-Time Embedded Systems (RTES) coupled with the variety of scheduling approaches and algorithms, the designer task is becoming increasingly hard. Few approaches have investigated design patterns to perform an automatic scheduling at a high-level of abstraction. However, only the partitioned scheduling that prevents task migrations has been taken into account. In this context, this paper proposes two design patterns maintaining an automatic choice of semi-partitioned and global scheduling algorithms. The Unified Modeling Language (UML) profile for the Modeling and Analysis of Real-Time Embedded systems (MARTE) is used to annotate the proposed design patterns with functional and nonfunctional properties.},
  isbn = {978-3-319-19236-9 978-3-319-19237-6},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\3XUUNZUX\\Magdich et al. - 2015 - Real-Time Design Patterns Architectural Designs f.pdf}
}

@inproceedings{magdichUMLMARTEBasedDesign2014,
  title = {A {{UML}}/{{MARTE-Based Design Pattern}} for {{Semi-partitioned Scheduling Analysis}}},
  booktitle = {2014 {{IEEE}} 23rd {{International WETICE Conference}}},
  author = {Magdich, Amina and Kacem, Yessine Hadj and Mahfoudhi, Adel and Kerboeuf, Mickael},
  year = {2014},
  month = jun,
  pages = {300--305},
  publisher = {{IEEE}},
  address = {{Parma, Italy}},
  doi = {10.1109/WETICE.2014.9},
  abstract = {The scheduling of Real-Time Embedded Systems (RTES) is a challenging step that requires vast knowledge and expertise about the domain, which makes difficult the step of complex systems scheduling modeling. This paper presents a design pattern intended to support and facilitate the scheduling modeling of multiprocessor systems. The contribution of this pattern is that is designed to i) support semi-partitioned scheduling allowing tasks migration ii) model all the tasks features/types and criteria of scheduling in the same view (only one pattern is used) iii) specify the system properties using a high-level modeling language UML/MARTE (Modeling and Analysis of Real-time and Embedded systems).},
  isbn = {978-1-4799-4249-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\KUYTQFMR\\Magdich et al. - 2014 - A UMLMARTE-Based Design Pattern for Semi-partitio.pdf}
}

@inproceedings{mannaertExploringConceptsDeterministic2007,
  title = {Exploring {{Concepts}} for {{Deterministic Software Engineering}}: {{Service Interfaces}}, {{Pattern Expansion}}, and {{Stability}}},
  shorttitle = {Exploring {{Concepts}} for {{Deterministic Software Engineering}}},
  booktitle = {International {{Conference}} on {{Software Engineering Advances}} ({{ICSEA}} 2007)},
  author = {Mannaert, Herwig and Verelst, Jan and Ven, Kris},
  year = {2007},
  month = aug,
  pages = {6--6},
  publisher = {{IEEE}},
  address = {{Cap Esterel, France}},
  doi = {10.1109/ICSEA.2007.32},
  abstract = {Automated production does not yet have an equivalent in the software development industry. Mathematical laws describing software development, and rules for structural composition of building blocks to create larger systems, do not exist exist at this point in time. Nevertheless, due to the fundamental need to improve the efficiency of software development, and to eliminate human errors, it is imperative to automate the software development process. In this paper, we explore some concepts that may contribute towards a more deterministic approach to software engineering. As the software industry is currently evolving to service oriented architectures, an attempt is made to define concepts like service interfaces, loose coupling, and stability of interfaces. In order to achieve a more structured and deterministic implementation of the components, the concept of pattern expansion is proposed: the extension of current code generation techniques to entire template solutions or design patterns. This technique is elaborated, and an implementation example is presented. The results of this pattern expansion prototype are discussed.},
  isbn = {978-0-7695-2937-0},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\9N85K4CD\\Mannaert et al. - 2007 - Exploring Concepts for Deterministic Software Engi.pdf}
}

@article{mircllaboratoryuniversityofsfaxtunisiaNewApproachInteractive2015,
  title = {A {{New Approach}} for {{Interactive Design Pattern Recommendation}}},
  author = {{Mir@cl Laboratory, University of Sfax, Tunisia} and Issaoui, Im{\`e}ne and Bouassida, Nadia and {Mir@cl Laboratory, University of Sfax, Tunisia} and Han{\^e}ne, Ben-Abdallah and {FCIT, King Abdulaziz University, P.O.Box 80200, Jeddah 21589, Kingdom of Saudi Arabia}},
  year = {2015},
  journal = {Lecture Notes on Software Engineering},
  volume = {3},
  number = {3},
  pages = {173--178},
  issn = {23013559},
  doi = {10.7763/LNSE.2015.V3.185},
  abstract = {Design patterns offer design and expertise reuse which promotes fast development and high quality products. However, to acquire the benefits of design patterns, a designer must have a high expertise to determine those design patterns suitable for a given design context and situation.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\XQETC2L5\\Mir@cl Laboratory, University of Sfax, Tunisia et al. - 2015 - A New Approach for Interactive Design Pattern Reco.pdf}
}

@article{mouratidisSecurityPatternsAgent,
  title = {Security {{Patterns}} for {{Agent Systems}}},
  author = {Mouratidis, Haralambos and Giorgini, Paolo and Schumacher, Markus},
  pages = {17},
  abstract = {Security patterns capture the experiences of experts, allowing novices to rely on expert knowledge and solve security problems in a more systematic and structured way. So far, literature provides many examples of security patterns for object-oriented systems. However, no attempt has been made to document security patterns for multiagent systems. In this paper we present a set of patterns for secure agent systems that, currently, consisting of four patterns.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\LZTC2DIP\\Mouratidis et al. - Security Patterns for Agent Systems.pdf}
}

@article{tsantalis2006design,
  title = {Design {{Pattern Detection Using Similarity Scoring}}},
  author = {Tsantalis, Nikolaos and Chatzigeorgiou, Alexander and Stephanides, George and Halkidis, Spyros},
  year = {2006},
  month = nov,
  journal = {IEEE Transactions on Software Engineering},
  volume = {32},
  number = {11},
  pages = {896--909},
  issn = {0098-5589},
  doi = {10.1109/TSE.2006.112},
  abstract = {The identification of design patterns as part of the reengineering process can convey important information to the designer. However, existing pattern detection methodologies generally have problems in dealing with one or more of the following issues: Identification of modified pattern versions, search space explosion for large systems and extensibility to novel patterns. In this paper, a design pattern detection methodology is proposed that is based on similarity scoring between graph vertices. Due to the nature of the underlying graph algorithm, this approach has the ability to also recognize patterns that are modified from their standard representation. Moreover, the approach exploits the fact that patterns reside in one or more inheritance hierarchies, reducing the size of the graphs to which the algorithm is applied. Finally, the algorithm does not rely on any pattern-specific heuristic, facilitating the extension to novel design structures. Evaluation on three open-source projects demonstrated the accuracy and the efficiency of the proposed method.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\4YIN9KMT\\Tsantalis et al. - 2006 - Design Pattern Detection Using Similarity Scoring.pdf}
}

@incollection{vivasBusinessProcessDrivenFramework2003,
  title = {Towards a {{Business Process-Driven Framework}} for {{Security Engineering}} with the {{UML}}},
  booktitle = {Information {{Security}}},
  author = {Vivas, Jos{\'e} L. and Montenegro, Jos{\'e} A. and L{\'o}pez, Javier},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and Boyd, Colin and Mao, Wenbo},
  year = {2003},
  volume = {2851},
  pages = {381--395},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/10958513_29},
  abstract = {A challenging task in security engineering concerns the specification and integration of security with other requirements at the top level of requirements engineering. Empirical studies show that it is commonly at the business process level that customers and end users are able to express their security needs. In addition, systems are often developed by automating existing manual business processes. Since many security notions belongs conceptually to the world of business processes, it is natural to try to capture and express them in the context of business models in which moreover customers and end users feel most comfortable. In this paper, based on experience drawn from an ongoing work within the CASENET project [1], we propose a UML-based business process-driven framework for the development of security-critical systems.},
  isbn = {978-3-540-20176-2 978-3-540-39981-0},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\XC7KF2QE\\Vivas et al. - 2003 - Towards a Business Process-Driven Framework for Se.pdf}
}

@inproceedings{xuRE2SEPTwoPhasesPatternbased2017,
  title = {{{RE2SEP}}: {{A Two-Phases Pattern-based Paradigm}} for {{Software Service Engineering}}},
  shorttitle = {{{RE2SEP}}},
  booktitle = {2017 {{IEEE World Congress}} on {{Services}} ({{SERVICES}})},
  author = {Xu, Xiaofei and Liu, Ruilin and Wang, Zhongjie and Tu, Zhiying and Xu, Hanchuan},
  year = {2017},
  month = jun,
  pages = {67--70},
  publisher = {{IEEE}},
  address = {{Honolulu, HI, USA}},
  doi = {10.1109/SERVICES.2017.30},
  abstract = {A key issue in big service era is how to optimally configure and operate existing service resources to serve various requirements of customers, i.e., how to reuse available service components to develop new service systems to fulfill massive individualized requirements effectively and efficiently. In terms of this challenge, in this paper we present a new paradigm for software service engineering called RE2SEP (RequirementEngineering Two-Phase Service Engineering Paradigm) which is composed of three components: a service-oriented requirement engineering approach, a domain-oriented service engineering approach, and a software service development approach. RE2SEP enables the rapid design and implementation of service solutions to match the requirements of massive individualized customers with the help of patterns, and potentially revolutionizes the traditional software engineering paradigms. A case study on an elderly care service system is given to demonstrate the feasibility of RE2SEP.},
  isbn = {978-1-5386-2002-1},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\ULWBI95K\\Xu et al. - 2017 - RE2SEP A Two-Phases Pattern-based Paradigm for So.pdf}
}

@article{yoderArchitecturalPatternsEnabling,
  title = {Architectural {{Patterns}} for {{Enabling Application Security}}},
  author = {Yoder, Joseph and Barcalow, Jeffrey},
  pages = {31},
  abstract = {Making an application secure is much harder than just adding a password protected login screen. This paper contains a collection of patterns to be used when dealing with application security. Secure Access Layer provides an interface for applications to use the security of the systems on which they are built. Single Access Point limits entry into the application through one single point. Check Point gives the developer a way to handle an unknown or changing security policy. Groups of users have different Roles that define what they can and cannot do. The global information about the user is distributed throughout the application with a Session. Finally, users are presented with either a Limited View of legal options or are given a Full View With Errors. These seven patterns work together to provide a security framework for building applications.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\Z6VWDNUC\\Yoder et Barcalow - Architectural Patterns for Enabling Application Se.pdf}
}


