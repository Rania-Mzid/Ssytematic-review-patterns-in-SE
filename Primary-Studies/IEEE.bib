@inproceedings{abeywickramaSimulatingArchitecturalPatterns2012,
  title = {Towards {{Simulating Architectural Patterns}} for {{Self-Aware}} and {{Self-Adaptive Systems}}},
  booktitle = {2012 {{IEEE Sixth International Conference}} on {{Self-Adaptive}} and {{Self-Organizing Systems Workshops}}},
  author = {Abeywickrama, Dhaminda B. and Zambonelli, Franco and Hoch, Nicklas},
  year = {2012},
  month = sep,
  pages = {133--138},
  publisher = {{IEEE}},
  address = {{Lyon, France}},
  doi = {10.1109/SASOW.2012.31},
  abstract = {Novel models and tools are required to support the engineering of systems that are self-aware of their current situations and capable of dynamically modifying their behavior and structure using feedback loops. In this paper, with the help of a case study in the area of e-mobility and based on our past work in self-adaptive systems modeling, we introduce a new tool (i.e., an Eclipse-based simulation plug-in) that we are developing for engineering and simulating architectural patterns based on feedback loops. Our plug-in can facilitate modeling of self-adaptive patterns using UML 2, visual animation of behavior to expose run-time information, animating composite structure, model-level debugging, simulating eventdriven models, and run-time prompting.},
  isbn = {978-0-7695-4895-1 978-1-4673-5153-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\IE2LRXPA\\Abeywickrama et al. - 2012 - Towards Simulating Architectural Patterns for Self.pdf}
}

@inproceedings{aliApplyingSecurityPatterns2018,
  title = {Applying Security Patterns for Authorization of Users in {{IoT}} Based Applications},
  booktitle = {2018 {{International Conference}} on {{Engineering}} and {{Emerging Technologies}} ({{ICEET}})},
  author = {Ali, Ishfaq and Asif, Muhammad},
  year = {2018},
  month = feb,
  pages = {1--5},
  publisher = {{IEEE}},
  address = {{Lahore}},
  doi = {10.1109/ICEET1.2018.8338648},
  abstract = {Internet of things (IoT) provides services which are environmentally event-driven. IoT provides sensing services of the physical environment to the information space, which is Event driven in common practice. For the development of IoT based application Software engineers need to assess the sensitivity of the data perceived by the physical devices. Commonly security is taken as a nonfunctional requirement but security requirements are as critical as other requirements. Authorization is one of the properties of security which is critical in context to Event Driven i.e. authorization of events and authorization of event generating devices. This research describes eight security patterns Documentation of Security Goal Pattern, Choose the Right Stuff, Third Party Enrollment Pattern, Reference Monitor pattern, Access matrix authorization rules, Role Based Access Control, Remote Authenticator/Authorizer, for authentication of the users, events and event generating devices to ensure its privilege to be in the system and perform actions.},
  isbn = {978-1-5386-3205-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\LL9T5AFY\\Ali et Asif - 2018 - Applying security patterns for authorization of us.pdf}
}

@inproceedings{babanezhadProcessPatternsWeb2010,
  title = {Process {{Patterns}} for {{Web Engineering}}},
  booktitle = {2010 {{IEEE}} 34th {{Annual Computer Software}} and {{Applications Conference}}},
  author = {Babanezhad, Reza and Bibalan, Yusef Mehrdad and Ramsin, Raman},
  year = {2010},
  month = jul,
  pages = {477--486},
  publisher = {{IEEE}},
  address = {{Seoul, Korea (South)}},
  doi = {10.1109/COMPSAC.2010.55},
  abstract = {Web Engineering has been enriched with processes and modeling languages that focus on the specific features of web-based systems, taking into account the special requirements and constraints that are associated with this specific context.},
  isbn = {978-1-4244-7512-4},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\SXR3XXBU\\Babanezhad et al. - 2010 - Process Patterns for Web Engineering.pdf}
}

@inproceedings{bernardiModelCheckingImprove2015,
  title = {Model {{Checking}} to {{Improve Precision}} of {{Design Pattern Instances Identification}} in {{OO Systems}}:},
  shorttitle = {Model {{Checking}} to {{Improve Precision}} of {{Design Pattern Instances Identification}} in {{OO Systems}}},
  booktitle = {Proceedings of the 10th {{International Conference}} on {{Software Paradigm Trends}}},
  author = {Bernardi, Mario L. and Cimitile, Marta and De Ruvo, Giuseppe and Di Lucca, Giuseppe A. and Santone, Antonella},
  year = {2015},
  pages = {53--63},
  publisher = {{SCITEPRESS - Science and and Technology Publications}},
  address = {{Colmar, Alsace, France}},
  doi = {10.5220/0005520500530063},
  isbn = {978-989-758-115-1},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\DVFNH992\\Bernardi et al. - 2015 - Model Checking to Improve Precision of Design Patt.pdf}
}

@article{dubininSemanticsRobustDesignPatterns2012,
  title = {Semantics-{{Robust Design Patterns}} for {{IEC}} 61499},
  author = {Dubinin, Victor N. and Vyatkin, Valeriy},
  year = {2012},
  month = may,
  journal = {IEEE Transactions on Industrial Informatics},
  volume = {8},
  number = {2},
  pages = {279--290},
  issn = {1551-3203, 1941-0050},
  doi = {10.1109/TII.2012.2186820},
  abstract = {The international standard IEC 61499 for the design of distributed industrial control systems defines an abstract model of function blocks (FB) which allows many different semantic interpretations. As a consequence, in addition, so-called execution models were proposed to specify the execution order of FBs. The variety of models leads to the incompatibility of tools and hinders the portability of automation software. To achieve a degree of execution model independence, in this paper, design patterns are suggested that make FB systems-robust to changes of execution semantics. A semantic-robust pattern is defined for a particular source execution model. The patterns themselves are implemented by means of the FB apparatus and therefore are fairly universal. The patterns can be defined and implemented using the FB transformations expressed in terms of Attributed Graph Grammars.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\GRRMI2WT\\Dubinin et Vyatkin - 2012 - Semantics-Robust Design Patterns for IEC 61499.pdf}
}

@inproceedings{durandSecuringDataverseAdapted2017,
  title = {Securing {{Dataverse}} with an {{Adapted Command Design Pattern}}},
  booktitle = {2017 {{IEEE Cybersecurity Development}} ({{SecDev}})},
  author = {Durand, Gustavo and {Bar-Sinai}, Michael and Crosas, Merce},
  year = {2017},
  month = sep,
  pages = {54--60},
  publisher = {{IEEE}},
  address = {{Cambridge, MA, USA}},
  doi = {10.1109/SecDev.2017.22},
  abstract = {In order to bake security into application design, we introduce an adaptation to the Command pattern: command instances are tagged with the permissions required to perform them for each object they manipulate. Prior to executing a command instance issued by a given user, an execution engine validates the user has the required permissions over the objects the command is about to operate on. Stating the required permissions can often be declarative. In addition to the usual advantages offered by the command pattern (such as standardized operation handling), this adaptation creates a single checkpoint for validating permissions throughout the application. This, in turn, enhances application security and reduces code duplication, for example between the API and UI controllers. Disadvantages include the lack of framework support, and a learning curve for existing developers. We have used this design in implementing Dataverse, a widely-used institutional data repository developed at Harvard University, which has been in production use since May 2015. As this design differs significantly from common web application design, we also look at how the development team adapted to it, and at how using it affected our development process.},
  isbn = {978-1-5386-3467-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\ETULY38A\\Durand et al. - 2017 - Securing Dataverse with an Adapted Command Design .pdf}
}

@inproceedings{fahmidehProcessPatternsServiceoriented2011,
  title = {Process Patterns for Service-Oriented Software Development},
  booktitle = {2011 {{FIFTH INTERNATIONAL CONFERENCE ON RESEARCH CHALLENGES IN INFORMATION SCIENCE}}},
  author = {Fahmideh, Mahdi and Sharifi, Mohsen and Jamshidi, Pooyan and Shams, Fereidoon and Haghighi, Hassan},
  year = {2011},
  month = may,
  pages = {1--9},
  publisher = {{IEEE}},
  address = {{Gosier, France}},
  doi = {10.1109/RCIS.2011.6006856},
  abstract = {Software systems development nowadays has moved towards dynamic composition of services that run on distributed infrastructures aligned with continuous changes in the system requirements. Consequently, software developers need to tailor project specific methodologies to fit their methodology requirements. Process patterns present a suitable solution by providing reusable method chunks of software development methodologies for constructing methodologies to fit specific requirements. In this paper, we propose a set of high-level service-oriented process patterns that can be used for constructing and enhancing situational service-oriented methodologies. We show how these patterns are used to construct a specific service-oriented methodology for the development of a sample system.},
  isbn = {978-1-4244-8670-0},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\9J9EEYZS\\Fahmideh et al. - 2011 - Process patterns for service-oriented software dev.pdf}
}

@inproceedings{fantPatternBasedModelingApproach2013,
  title = {A {{Pattern-Based Modeling Approach}} for {{Software Product Line Engineering}}},
  booktitle = {2013 46th {{Hawaii International Conference}} on {{System Sciences}}},
  author = {Fant, Julie Street and Gomaa, Hassan and Pettit, Robert G.},
  year = {2013},
  month = jan,
  pages = {4985--4994},
  publisher = {{IEEE}},
  address = {{Wailea, HI, USA}},
  doi = {10.1109/HICSS.2013.52},
  abstract = {This paper addresses the problem of variability in software product line (SPL) engineering by first considering different SPL model-based approaches and in particular the tradeoff between the development effort in domain engineering vs. application engineering. The paper then describes a SPL engineering approach, which is both model-based, and pattern-based. This approach bases the SPL software architecture on software architectural patterns and relates these patterns to SPL features. The paper describes how this approach has been applied to an unmanned space flight SPL.},
  isbn = {978-1-4673-5933-7 978-0-7695-4892-0},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\8IRIAFRL\\Fant et al. - 2013 - A Pattern-Based Modeling Approach for Software Pro.pdf}
}

@inproceedings{fayadUnifiedSoftwareEngineering2016,
  title = {Unified {{Software Engineering Reuse}} ({{USER}}) Using Stable Analysis, Design and Architectural Patterns},
  booktitle = {2016 {{Future Technologies Conference}} ({{FTC}})},
  author = {Fayad, Mohamed E. and Flood, Charles A.},
  year = {2016},
  month = dec,
  pages = {706--711},
  publisher = {{IEEE}},
  address = {{San Francisco, CA, USA}},
  doi = {10.1109/FTC.2016.7821682},
  abstract = {The endless pursuit for creating effective systems for software reuse has continued for as long as software has existed. To date, there have been few, if any, such effective systems created for ensuring a high degree of reusability from one project to the next. The inherent tendency for projects to demand substantial alterations, despite being designed for maximum reusability, remains strong evidence of this fact.},
  isbn = {978-1-5090-4171-8},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\3PDQ253Y\\Fayad et Flood - 2016 - Unified Software Engineering Reuse (USER) using st.pdf}
}

@inproceedings{frederickVULCANToolAutomatically2008,
  title = {{{VULCAN}}: {{A Tool}} for {{Automatically Generating Code}} from {{Design Patterns}}},
  shorttitle = {{{VULCAN}}},
  booktitle = {2008 2nd {{Annual IEEE Systems Conference}}},
  author = {Frederick, George and Bond, Pat and Tilley, Scott},
  year = {2008},
  month = apr,
  pages = {1--4},
  publisher = {{IEEE}},
  address = {{Montreal, QC, Canada}},
  doi = {10.1109/SYSTEMS.2008.4519012},
  abstract = {This paper presents a prototype tool called VULCAN that aims to assist with the creation ofhigh quality code through the use of design patterns. This tool comes in the form ofa plug-in for the popular Eclipse software development environment. VULCAN facilitates high quality code creation through the automatic generation of design pattern code templates, customized with user input, and integrated into pre-existing projects. This paper also provides a description of the tool VULCAN and its implementation. By automating the design pattern generation process through the application of a practical and easily usable tool, the adoption of a model-driven engineering approach using design patterns can be substantially mitigated, resulting in improved system quality.},
  isbn = {978-1-4244-2149-7 978-1-4244-2150-3},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\54DANQZ3\\Frederick et al. - 2008 - VULCAN A Tool for Automatically Generating Code f.pdf}
}

@inproceedings{garcia-holgadoArchitecturalPatternDefinition2014,
  title = {Architectural Pattern for the Definition of {{eLearning}} Ecosystems Based on {{Open Source}} Developments},
  booktitle = {2014 {{International Symposium}} on {{Computers}} in {{Education}} ({{SIIE}})},
  author = {{Garcia-Holgado}, Alicia and {Garcia-Penalvo}, Francisco Jose},
  year = {2014},
  month = nov,
  pages = {93--98},
  publisher = {{IEEE}},
  address = {{Logrono, La Rioja, Spain}},
  doi = {10.1109/SIIE.2014.7017711},
  abstract = {The huge penetration of technological ecosystems based on Open Source software, as a technological solution to support the knowledge management of entities and institutions, presents new problems in the development and integration of new software components. The aim of this paper has been to define an architectural pattern that lays the foundations to define and implement eLearning ecosystems. The pattern definition has been realized from a comparative analysis of the Strengths, Weaknesses, Opportunities and Threats of a number of real case studies developed in different contexts. As a result, we have obtained an architectural pattern composed by several layers and a set of external elements that provides a solution to the main problems identified in the development of technological ecosystems. The pattern has been tested in a real context, concretely in the Public Administration, its which has demonstrated that works properly.},
  isbn = {978-1-4799-4428-6},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\F6LT9IFK\\Garcia-Holgado et Garcia-Penalvo - 2014 - Architectural pattern for the definition of eLearn.pdf}
}

@inproceedings{gokmenStereotypesDesignPatterns2021,
  title = {Stereotypes as {{Design Patterns}} for {{Serious Games}} to {{Enhance Software Comprehension}}},
  booktitle = {2021 {{IEEE Conference}} on {{Games}} ({{CoG}})},
  author = {Gokmen, Rene and Heidrich, David and Schreiber, Andreas and Bichlmeier, Christoph},
  year = {2021},
  month = aug,
  pages = {1--3},
  publisher = {{IEEE}},
  address = {{Copenhagen, Denmark}},
  doi = {10.1109/CoG52621.2021.9619060},
  abstract = {Stereotypes support a high-level software comprehension by implying roles and responsibilities of classes in software systems. We propose the idea of using stereotypes as design patterns for serious games to enhance object oriented software comprehension. These design patterns can reduce the complexity of software systems and encode software knowledge into game mechanics. We provide examples of possible game mechanics and discuss the application of the proposed design patterns.},
  isbn = {978-1-66543-886-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\FFYBKW45\\Gokmen et al. - 2021 - Stereotypes as Design Patterns for Serious Games t.pdf}
}

@inproceedings{huangDevelopingNovelDesign2010,
  title = {Developing Novel Design Patterns in Information Visualization for Mobile Health Systems},
  booktitle = {2010 3rd {{International Conference}} on {{Biomedical Engineering}} and {{Informatics}}},
  author = {Huang, JianYuan and Li, Ye and Zhang, JingMeng and Yu, JianYe},
  year = {2010},
  month = oct,
  pages = {2748--2752},
  publisher = {{IEEE}},
  address = {{Yantai, China}},
  doi = {10.1109/BMEI.2010.5639813},
  isbn = {978-1-4244-6498-2 978-1-4244-6495-1 978-1-4244-6497-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\LWSDBED4\\Huang et al. - 2010 - Developing novel design patterns in information vi.pdf}
}

@inproceedings{khaariProcessPatternsAspectOriented2010,
  title = {Process {{Patterns}} for {{Aspect-Oriented Software Development}}},
  booktitle = {2010 17th {{IEEE International Conference}} and {{Workshops}} on {{Engineering}} of {{Computer Based Systems}}},
  author = {Khaari, Massood and Ramsin, Raman},
  year = {2010},
  pages = {241--250},
  publisher = {{IEEE}},
  address = {{Oxford, England}},
  doi = {10.1109/ECBS.2010.33},
  abstract = {Focusing on aspects during early stages of the software development lifecycle has received special attention by many researchers, leading to the advent of numerous Aspect-Oriented Software Development (AOSD) methods. This has consequently given a relatively high level of maturity to aspect-oriented processes. Process patterns, on the other hand, have been adopted as suitable mechanisms for defining or tailoring processes to fit specific organizational/project requirements. Process patterns, which essentially are reusable process components extracted from successful processes and practices, can be used to engineer new software development methodologies or to enhance existing ones.},
  isbn = {978-1-4244-6537-8},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\FKSG8Q8H\\Khaari et Ramsin - 2010 - Process Patterns for Aspect-Oriented Software Deve.pdf}
}

@article{konradAddingFormalSpecifications,
  title = {Adding {{Formal Specifications}} to {{Requirements Patterns}}},
  author = {Konrad, Sascha and Campbell, Laura A and Cheng, Betty H C},
  pages = {10},
  abstract = {Embedded systems usually must achieve a higher level of robustness and reliability because they control real-world physical processes or devices upon which we depend, frequently, in a critical way. Consequently, methods for modeling and developing embedded systems and rigorously verifying behavior before committing to code are increasingly important. In order to use object-oriented development techniques and UML for embedded systems, we previously developed a framework for adding formal semantics to a collection of UML diagrams that enable the automated derivation of formal language specifications for those diagrams. Recently, we also identified a number of requirements patterns for use in the development of requirements and high-level design for embedded systems, and constructed a requirements pattern template. This paper describes how we have augmented the template to include requirements constraints that might be applicable when using a given pattern. With the ability to generate formal specifications from the UML diagrams, these constraints can be analyzed using existing model checkers. We also include a description of how the requirements patterns have been used to model and formally analyze an automotive embedded system.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\E8693J8W\\Konrad et al. - Adding Formal Speciﬁcations to Requirements Patter.pdf}
}

@incollection{konradRequirementsPatternsDrivenApproach2003,
  title = {A {{Requirements Patterns-Driven Approach}} to {{Specify Systems}} and {{Check Properties}}},
  booktitle = {Model {{Checking Software}}},
  author = {Konrad, Sascha and Campbell, Laura A. and Cheng, Betty H. C. and Deng, Min},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and Ball, Thomas and Rajamani, Sriram K.},
  year = {2003},
  volume = {2648},
  pages = {18--33},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-44829-2_2},
  abstract = {We previously developed a framework, Hydra, for adding formal semantics to a collection of UML diagrams that enable the automated derivation of formal language specifications for those diagrams. Recently, we have also identified a number of requirements patterns for embedded systems that includes sample UML structural and behavioral diagrams for modeling requirements and high-level design for embedded systems. This paper describes a requirements patterns-driven approach for developing UML diagrams for embedded systems, where each pattern has a constraints section to specify safety and other invariant properties. We show how the diagrams for an industrial automotive system, via specifications generated from Hydra, can be automatically analyzed for adherence to these formally specified constraints using the SPIN model checker. We developed the MINERVA framework to support the graphical construction of UML diagrams and to visualize the results from the SPIN analysis in terms of the original UML diagrams.},
  isbn = {978-3-540-40117-9 978-3-540-44829-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\KKUEZYTV\\Konrad et al. - 2003 - A Requirements Patterns-Driven Approach to Specify.pdf}
}

@inproceedings{konradRequirementsPatternsEmbedded2002,
  title = {Requirements Patterns for Embedded Systems},
  booktitle = {Proceedings {{IEEE Joint International Conference}} on {{Requirements Engineering}}},
  author = {Konrad, S. and Cheng, B.H.C.},
  year = {2002},
  pages = {127--136},
  publisher = {{IEEE Comput. Soc}},
  address = {{Essen, Germany}},
  doi = {10.1109/ICRE.2002.1211541},
  abstract = {In software engineering, design patterns propose solution skeletons for common design problems. The solution skeleton is described in such a way that the design can be used for other projects, where each application tailors the design to specific project constraints. This paper describes research into investigating how a similar approach to reuse can be applied to requirements specifications, which we term requirements patterns. Specifically, we explore how object-oriented modeling notations, such as the Unified Modeling Language (UML), can be used to represent common requirements patterns. Structural and behavioral information are captured as part of a requirements pattern. In order to maximize reuse, we focus on requirements patterns for embedded systems. This paper also describes case studies that illustrate how we have applied these general patterns to multiple embedded systems applications from the automotive industry.},
  isbn = {978-0-7695-1465-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\7CHSFKII\\Konrad et Cheng - 2002 - Requirements patterns for embedded systems.pdf}
}

@inproceedings{koturUtilizationDesignPatterns2020,
  title = {Utilization of Design Patterns in {{AUTOSAR Adaptive}} Standard},
  booktitle = {2020 {{IEEE}} 10th {{International Conference}} on {{Consumer Electronics}} ({{ICCE-Berlin}})},
  author = {Kotur, Mila and Lukic, Nemanja and Krunic, Momcilo and Velikic, Gordana},
  year = {2020},
  month = nov,
  pages = {1--6},
  publisher = {{IEEE}},
  address = {{Berlin, Germany}},
  doi = {10.1109/ICCE-Berlin50680.2020.9352172},
  abstract = {Modern civilization faces a significant challenge in embracing emerging technologies, like autonomous driving. In this article authors present that autonomous driving lies in software safety standards which are in ongoing revisions and improvements under the eyes of interested parties and public in whole. The article explains the key concepts for software development in the modern automotive industry such as ISO, V model, ASIL, SOME / IP and programming languages used in the implementation of the solution, such as C ++. Article also addressed AUTOSAR as the global standardization consortium for automotive software architectures that aims to adapt to current trends, and to provide a consistent standard for these aspects. Design patterns in AUTOSAR Adaptive standard have been validated as a useful aspect in communication between different software components. So, there is a need to create and permanently upgrade a catalog of design patterns which helps designers to build reliable critical software architecture adequate for intense communication within the car.},
  isbn = {978-1-72815-885-3},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\QDBKUSY8\\Kotur et al. - 2020 - Utilization of design patterns in AUTOSAR Adaptive.pdf}
}

@inproceedings{leeCaseStudyApplying2017,
  title = {A Case Study in Applying Security Design Patterns for {{IoT}} Software System},
  booktitle = {2017 {{International Conference}} on {{Applied System Innovation}} ({{ICASI}})},
  author = {Lee, Wen-Tin and Law, Po-Jen},
  year = {2017},
  month = may,
  pages = {1162--1165},
  publisher = {{IEEE}},
  address = {{Sapporo, Japan}},
  doi = {10.1109/ICASI.2017.7988402},
  abstract = {The Internet of Things (IoT) involves the increasing prevalence of objects and entities with the ability to transfer data over the network automatically. The main problem of IoT software system is that the security has not always been considered. This study applies five security design patterns for the development of an IoT software system. The security issue of unsecure application data is addressed by the security design patterns of secure directory, secure logger and exception manager. The security issues of unsecure wireless communication and unsecure user information are addressed by secure adapter pattern and input validation pattern, respectively.},
  isbn = {978-1-5090-4897-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\8ZZKKN55\\Lee et Law - 2017 - A case study in applying security design patterns .pdf}
}

@inproceedings{ligaardenArchitecturalPatternEnterprise2011,
  title = {An Architectural Pattern for Enterprise Level Monitoring Tools},
  booktitle = {2011 {{International Workshop}} on the {{Maintenance}} and {{Evolution}} of {{Service-Oriented}} and {{Cloud-Based Systems}}},
  author = {Ligaarden, Olav Skjelkvale and Lund, Mass Soldal and Refsdal, Atle and Seehusen, Fredrik and Stolen, Ketil},
  year = {2011},
  month = sep,
  pages = {1--10},
  publisher = {{IEEE}},
  address = {{Williamsburg, VA, USA}},
  doi = {10.1109/MESOCA.2011.6049035},
  abstract = {Requirements from laws and regulations, as well as internal business objectives and policies, motivate enterprises to implement advanced monitoring tools. For example, a company may want a dynamic picture of its operational risk level, its performance, or the extent to which it achieves its business objectives. The widespread use of information and communication technology (ICT) supported business processes means there is great potential for enterprise level monitoring tools. In this paper we present an architectural pattern to serve as a basis for building such monitoring tools that collect relevant data from the ICT infrastructure, aggregate this data into useful information, and present this in a way that is understandable to users.},
  isbn = {978-1-4577-0645-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\I4U5U8N7\\Ligaarden et al. - 2011 - An architectural pattern for enterprise level moni.pdf}
}

@inproceedings{maoOperationalPatternBased2016,
  title = {Operational Pattern Based Code Generation for Management Information System: {{An}} Industrial Case Study},
  shorttitle = {Operational Pattern Based Code Generation for Management Information System},
  booktitle = {2016 17th {{IEEE}}/{{ACIS International Conference}} on {{Software Engineering}}, {{Artificial Intelligence}}, {{Networking}} and {{Parallel}}/{{Distributed Computing}} ({{SNPD}})},
  author = {Mao, Fagui and Cai, Xuyang and Shen, Beijun and Xia, Yong and Jin, Bo},
  year = {2016},
  month = may,
  pages = {425--430},
  publisher = {{IEEE}},
  address = {{Shanghai, China}},
  doi = {10.1109/SNPD.2016.7515935},
  abstract = {Code generation technology can significantly improve productivity and software quality. However, due to limited financial and human resources in most of small and medium software enterprises, there are many challenges when leveraging code generation approaches to large-scale software development. In this paper, an operational pattern based code generation approach is proposed for rapid development of domain-specific management information system. We demonstrate the approach with details: (I) semi-automatically extracting operational patterns from requirement documents, (II) building feature models to manage the commonalities and variability of each operational pattern, (III) mapping operational patterns into skeleton code with a template-based code generation technique, etc. Then we conduct an industrial case study in asset information management domain at CancoSoft Company for about 2 years, to analyze its feasibility and efficiency. 14 operational patterns are successfully extracted from 355 initial key phrases, and a code generator is implemented and applied to develop new Web applications. Preliminary findings show that the software development based on our approach yields a nearly 30\% higher productivity as compared to traditional software development. Through code analysis, we find that around 70\% of code can be automatically generated, and the generated code is also effective.},
  isbn = {978-1-5090-2239-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\3ERY7KGH\\Mao et al. - 2016 - Operational pattern based code generation for mana.pdf}
}

@inproceedings{navetSoftwarePatternsFault2017,
  title = {Software Patterns for Fault Injection in {{CPS}} Engineering},
  booktitle = {2017 22nd {{IEEE International Conference}} on {{Emerging Technologies}} and {{Factory Automation}} ({{ETFA}})},
  author = {Navet, Nicolas and Bertolotti, Ivan Cibrario and Hu, Tingting},
  year = {2017},
  month = sep,
  pages = {1--6},
  publisher = {{IEEE}},
  address = {{Limassol}},
  doi = {10.1109/ETFA.2017.8247701},
  abstract = {Software fault injection is a powerful technique to evaluate the robustness of an application and guide in the choice of fault-tolerant mechanisms. It however requires a lot of time and know-how to be properly implemented, which severely hinders its applicability. We believe software fault injection can be made more ``affordable'' by automating it and have it integrated within a model-driven engineering design flow. We first propose in this paper a framework supporting these objectives. Then, illustrating on the domain-specific language CPAL, we present injection patterns that can be embedded in the application code and discuss the types of faults each supports, as well as implementation issues.},
  isbn = {978-1-5090-6505-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\5AWW8J87\\Navet et al. - 2017 - Software patterns for fault injection in CPS engin.pdf}
}

@inproceedings{nikolaevaOneApproachImprove2019,
  title = {One {{Approach}} to {{Improve}} the {{Software Quality}} by {{Applying Software Design Patterns}}},
  booktitle = {2019 16th {{Conference}} on {{Electrical Machines}}, {{Drives}} and {{Power Systems}} ({{ELMA}})},
  author = {Nikolaeva, Dimitrichka and Bozhikova, Violeta},
  year = {2019},
  month = jun,
  pages = {1--6},
  publisher = {{IEEE}},
  address = {{Varna, Bulgaria}},
  doi = {10.1109/ELMA.2019.8771691},
  abstract = {The quality of the software is determined by features not related to its functionality such as ease-of-use, technical support, responsiveness and so on. By measuring these properties of software products, software performance attributes are evaluated, such as efficiency, reliability, maintainability, etc. Design Patterns (DP) are one of the ways to improve software quality. The report analyzes the use of DP combinations in developing a class of software systems, namely Information Systems (IS) and presents a new software development approach based on a custom Combination of Design Patterns (CDP). The results of the actual implementation of the approach are also presented as well as conclusions about the achieved quality of the created software product. It has to be concluded that the application of CDP for this class of software systems will lead to overall improvement of software quality.},
  isbn = {978-1-72811-413-2},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\YXGWCMS8\\Nikolaeva et Bozhikova - 2019 - One Approach to Improve the Software Quality by Ap.pdf}
}

@inproceedings{overtonProblemOrientedTheoryPatternOriented2009,
  title = {A {{Problem-Oriented Theory}} of {{Pattern-Oriented Analysis}} and {{Design}}},
  booktitle = {2009 {{Computation World}}: {{Future Computing}}, {{Service Computation}}, {{Cognitive}}, {{Adaptive}}, {{Content}}, {{Patterns}}},
  author = {Overton, Jerry and Hall, Jon G. and Rapanotti, Lucia},
  year = {2009},
  month = nov,
  pages = {208--213},
  publisher = {{IEEE}},
  address = {{Athens, Greece}},
  doi = {10.1109/ComputationWorld.2009.57},
  abstract = {The overall goal of this work is to provide problemoriented support for Pattern-Oriented Analysis and Design (POAD) so that (i) we may construct a better understanding of the relationship of POAD to other software development approaches and (ii) we can extend the reach of problem-orientation to design patterns. This paper extends our previous contributions to show how both high-level and detailed design phases can be given a problem-oriented encoding.},
  isbn = {978-1-4244-5166-1},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\5ZTJA6ZD\\Overton et al. - 2009 - A Problem-Oriented Theory of Pattern-Oriented Anal.pdf}
}

@inproceedings{perezsansalvadorPatternObjectorientedArchitecture2011,
  title = {Pattern Object-Oriented Architecture for {{Multirate Integration Methods}}},
  booktitle = {{{CONIELECOMP}} 2011, 21st {{International Conference}} on {{Electrical Communications}} and {{Computers}}},
  author = {Perez Sansalvador, Julio Cesar and Rodriguez Gomez, Gustavo and Pomares Hernandez, Saul E.},
  year = {2011},
  month = feb,
  pages = {158--163},
  publisher = {{IEEE}},
  address = {{San Andres Cholula}},
  doi = {10.1109/CONIELECOMP.2011.5749354},
  abstract = {On the whole, scientific software community has focused in developing faster algorithms, setting aside flexibility, reuse, maintainability and scalability. The common approach used to develop software is the functional decomposition. However, the development of new applications is currently more complex than the former software development. In this work, we present a pattern object oriented architecture (POO) to approximate solutions of initial value problems (IVPs) with different time scales. We propose the use of design patterns' techniques in the developing process of the software architecture. These techniques allow to easily add new numerical methods and use them to create different multirate configurations. Besides, we give evidence that design patterns' techniques are suitable in the analysis, design and development of scientific software.},
  isbn = {978-1-4244-9558-0 978-1-4244-9559-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\696L7K6W\\Perez Sansalvador et al. - 2011 - Pattern object-oriented architecture for Multirate.pdf}
}

@inproceedings{schweigerApplyingSoftwarePatterns2013,
  title = {Applying Software Patterns to Requirements Engineering for Avionics Systems},
  booktitle = {2013 {{IEEE International Systems Conference}} ({{SysCon}})},
  author = {Schweiger, A.},
  year = {2013},
  month = apr,
  pages = {25--30},
  publisher = {{IEEE}},
  address = {{Orlando, FL}},
  doi = {10.1109/SysCon.2013.6549853},
  abstract = {Due to the long life cycles of aircraft their avionics systems usually have to be maintained and upgraded extensively. In order to support these operational requirements and possible product variants during the development, appropriate design techniques are needed. For the correct transfer of requirements to software architecture and software detailed design the syntactic and semantic gap between the requirements specification and the follow-up development steps needs to be minimized. Literature survey shows that there is a lack of such a requirements methodology. Therefore, this paper collects a catalogue of requirements patterns that meet the special demands for the development of avionics systems and are induced from established software design patterns. Applying these in a typical avionics system development project demonstrates their benefit and also highlights the way ahead.},
  isbn = {978-1-4673-3108-1 978-1-4673-3107-4 978-1-4673-3106-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\HCUKWUI8\\Schweiger - 2013 - Applying software patterns to requirements enginee.pdf}
}

@article{sievi-korteTechniquesGeneticSoftware2015,
  title = {Techniques for {{Genetic Software Architecture Design}}},
  author = {{Sievi-Korte}, Outi and Koskimies, Kai and M{\"a}kinen, Erkki},
  year = {2015},
  month = nov,
  journal = {The Computer Journal},
  volume = {58},
  number = {11},
  pages = {3141--3170},
  issn = {0010-4620, 1460-2067},
  doi = {10.1093/comjnl/bxv049},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\UKYMZB8B\\Sievi-Korte et al. - 2015 - Techniques for Genetic Software Architecture Desig.pdf}
}

@article{wei-tektsaiRapidEmbeddedSystem2005,
  title = {Rapid {{Embedded System Testing Using Verification Patterns}}},
  author = {{Wei-Tek Tsai} and {Lian Yu} and {Feng Zhu} and Paul, R.},
  year = {2005},
  month = jul,
  journal = {IEEE Software},
  volume = {22},
  number = {4},
  pages = {68--75},
  issn = {0740-7459},
  doi = {10.1109/MS.2005.103},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\W7TYIFZ2\\Wei-Tek Tsai et al. - 2005 - Rapid Embedded System Testing Using Verification P.pdf}
}


