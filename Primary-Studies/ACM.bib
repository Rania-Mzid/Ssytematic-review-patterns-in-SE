%%%%%%% Primary studies collected from the ACM Library %%%%%%%%%%%%%%%%%%%%%%%
@inproceedings{al-obeidallahMLDAMultipleLevels2017,
  title = {{{MLDA}}: {{A Multiple Levels Detection Approach}} for {{Design Patterns Recovery}}},
  shorttitle = {{{MLDA}}},
  booktitle = {Proceedings of the {{International Conference}} on {{Compute}} and {{Data Analysis}} - {{ICCDA}} '17},
  author = {{Al-Obeidallah}, Mohammed and Petridis, Miltos and Kapetanakis, Stelios},
  year = {2017},
  pages = {33--40},
  publisher = {{ACM Press}},
  address = {{Lakeland, FL, USA}},
  doi = {10.1145/3093241.3093244},
  abstract = {Design patterns have a key role in the software development process. They describe both structure, behavior of classes and their relationships. During the maintenance phase, architects can benefit from knowing the underlying software design choices made during the implementation. Moreover, design patterns can improve software documentation, speed up the development process and enable large-scale reuse of software architectures. This paper presents a Multiple Levels Detection Approach (MLDA) to recover design pattern instances from Java source code. The novelty behind MLDA is its ability to extract design pattern instances based on a generated class level representation of an investigated system. Specifically, MLDA presents what is the so-called Structural Search Model (SSM) which incrementally builds the structure of each design pattern based on the generated source code model. As the experiment results illustrate, MLDA is able to extract 22 design patterns with reasonable detection accuracy.},
  isbn = {978-1-4503-5241-3},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\4EMTIZJG\\Al-Obeidallah et al. - 2017 - MLDA A Multiple Levels Detection Approach for Des.pdf}
}

@inproceedings{alebrahimProblemorientedSecurityPatterns2014b,
  title = {Problem-Oriented Security Patterns for Requirements Engineering},
  booktitle = {Proceedings of the 19th {{European Conference}} on {{Pattern Languages}} of {{Programs}} - {{EuroPLoP}} '14},
  author = {Alebrahim, Azadeh and Heisel, Maritta},
  year = {2014},
  pages = {1--17},
  publisher = {{ACM Press}},
  address = {{Irsee, Germany}},
  doi = {10.1145/2721956.2721963},
  isbn = {978-1-4503-3416-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\8JS63CT9\\Alebrahim et Heisel - 2014 - Problem-oriented security patterns for requirement.pdf}
}

@inproceedings{bernardiDeclarativeDesignPatternbased2014a,
  title = {Declarative Design Pattern-Based Development Using Aspect Oriented Programming},
  booktitle = {Proceedings of the 29th {{Annual ACM Symposium}} on {{Applied Computing}}},
  author = {Bernardi, Mario L. and Cimitile, Marta and Di Lucca, Giuseppe A.},
  year = {2014},
  month = mar,
  pages = {1625--1630},
  publisher = {{ACM}},
  address = {{Gyeongju Republic of Korea}},
  doi = {10.1145/2554850.2554993},
  isbn = {978-1-4503-2469-4},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\EX7FTBVF\\Bernardi et al. - 2014 - Declarative design pattern-based development using.pdf}
}

@inproceedings{bienGraphicalUserInterface2015b,
  title = {Graphical {{User Interface Variability Architecture Pattern}}},
  booktitle = {Proceedings of the {{Sixth International Symposium}} on {{Information}} and {{Communication Technology}}},
  author = {Bien, Ngo Huy and Thu, Tran Dan},
  year = {2015},
  month = dec,
  pages = {304--311},
  publisher = {{ACM}},
  address = {{Hue City Viet Nam}},
  doi = {10.1145/2833258.2833284},
  abstract = {Designing software applications for multiple tenants is challenging. The task is even harder when designing pure multitenancy applications that must support different customers using a single codebase and data store. One of the most common problems when developing these systems is to support different graphical user interface not only for different users but also tenants. This critical requirement also applies to context-aware applications in which different graphical user interface should be presented to each user according to the user's context or software components and platforms that should allow developers easily to create different looks and feel for their applications. In this paper, we propose an architecture pattern for modeling graphical user interface that support different customizations and configurations. The modularity, the reusability and the maintainability of the pattern were evaluated by qualitative analysis based on wellknown patterns used in the proposed architecture pattern. Real world systems were built to validate the applicability, the correctness, the security and the performance of the pattern. We believe that our pattern will be useful for software providers as well as normal organizations when building software components or software systems for different customers or creating multitenancy applications in a cloud-based environment or building context-aware applications.},
  isbn = {978-1-4503-3843-1},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\SV37CGTL\\Bien et Thu - 2015 - Graphical User Interface Variability Architecture .pdf}
}

@inproceedings{blomqvistExperimentsPatternbasedOntology2009a,
  title = {Experiments on Pattern-Based Ontology Design},
  booktitle = {Proceedings of the Fifth International Conference on {{Knowledge}} Capture - {{K-CAP}} '09},
  author = {Blomqvist, Eva and Gangemi, Aldo and Presutti, Valentina},
  year = {2009},
  pages = {41},
  publisher = {{ACM Press}},
  address = {{Redondo Beach, California, USA}},
  doi = {10.1145/1597735.1597743},
  abstract = {This paper addresses the evaluation of pattern-based ontology design through experiments. An initial method for reuse of content ontology design patterns (Content ODPs) was used by the participants during the experiments. Hypotheses considered include the usefulness of Content ODPs for ontology developers, and we additionally study in what respects they are useful and what open issues remain. The main conclusions are that Content ODPs are perceived as useful by ontology developers. The ontology quality is improved when Content ODPs are reused, coverage of the task increases, usability is improved, and common modelling mistakes can be avoided.},
  isbn = {978-1-60558-658-8},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\8IL4EWPN\\Blomqvist et al. - 2009 - Experiments on pattern-based ontology design.pdf}
}

@article{brownImplementationPatternsMicroservices,
  title = {Implementation {{Patterns}} for {{Microservices Architectures}}},
  author = {Brown, Kyle and Woolf, Bobby},
  pages = {35},
  abstract = {In this paper we describe a set of implementation patterns for building applications using microservices. We discuss the application types and requirements that lead to the n eed for microservices, examine different types of microservices, and discuss patterns required for implementing data storage and devops in a microservices environment.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\AMC5L6CA\\Brown et Woolf - Implementation Patterns for Microservices Architec.pdf}
}

@inproceedings{charalampidouTheoreticalModelCapturing2017,
  title = {A Theoretical Model for Capturing the Impact of Design Patterns on Quality: The Decorator Case Study},
  shorttitle = {A Theoretical Model for Capturing the Impact of Design Patterns on Quality},
  booktitle = {Proceedings of the {{Symposium}} on {{Applied Computing}}},
  author = {Charalampidou, Sofia and Ampatzoglou, Apostolus and Avgeriou, Paris and Sencer, Seren and Arvanitou, Elvira-Maria and Stamelos, Ioannis},
  year = {2017},
  month = apr,
  pages = {1231--1238},
  publisher = {{ACM}},
  address = {{Marrakech Morocco}},
  doi = {10.1145/3019612.3019781},
  abstract = {Design patterns are widely recognized as reusable solutions that can be applied for improving design quality. However, empirical results suggest that patterns may sometimes support and other times hurt a quality attribute. Thus, there is a need for guidance on when a pattern is beneficial and when it is not. To provide such guidance, we propose a theoretical model for understanding the effect of patterns on quality. The obtained results are expected to improve the theoretical body of knowledge on design patterns, and facilitate informed decision making about when to insert or remove a pattern from a system. As an example, we present and discuss the results of modeling and exploring the effect of Decorator instances on quality. The results suggest that Decorator instances that are not expected to evolve through the addition of components in composite objects decrease system cohesion and therefore, modularity and maintainability are weakened.},
  isbn = {978-1-4503-4486-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\GK4KMNJF\\Charalampidou et al. - 2017 - A theoretical model for capturing the impact of de.pdf}
}

@inproceedings{daoudiExploratoryStudyMVCbased2019,
  title = {An Exploratory Study of {{MVC-based}} Architectural Patterns in {{Android}} Apps},
  booktitle = {Proceedings of the 34th {{ACM}}/{{SIGAPP Symposium}} on {{Applied Computing}}},
  author = {Daoudi, Aymen and ElBoussaidi, Ghizlane and Moha, Naouel and Kpodjedo, S{\`e}gla},
  year = {2019},
  month = apr,
  pages = {1711--1720},
  publisher = {{ACM}},
  address = {{Limassol Cyprus}},
  doi = {10.1145/3297280.3297447},
  abstract = {Mobile app development now represents a significant part of the software industry, with Android being the largest ecosystem. Android development comes with its own design practices and templates (layouts, activities, etc.). Developers also use different established architectural patterns for designing interactive software such as MVC, MVP and MVVM. They implement these patterns based on their understanding and experience. Thus, the choice and the implementation of such patterns varies from a developer to another. To the best of our knowledge, there is no work that provides a comprehensive view of the use of these patterns in mobile apps. Moreover, there is no clear understanding of which pattern to use and what is the trend for designing mobile apps using such patterns. In this paper, we propose an automatic approach to identify which MVC-based architectural pattern (MVC, MVP and MVVM) is used predominantly in a given app. For this purpose, we defined each of these patterns through a number of heuristics according to the pattern's potential implementations within the Android framework. We conducted an empirical study on a large set of mobile apps downloaded from the Google Play Store. We found, not surprisingly, a dominance of the popular MVC pattern, a rare use of MVP while MVVM is almost unused and a significant number of apps do not follow any pattern. The empirical study also enabled us to analyse the use of these patterns by domain, size and last-update date of the apps. We observed that MVC has been the most used pattern over the past years and it continues to gain popularity, and that small-size apps are mostly the ones that do not use any pattern.},
  isbn = {978-1-4503-5933-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\HM8752MZ\\Daoudi et al. - 2019 - An exploratory study of MVC-based architectural pa.pdf}
}

@inproceedings{delessyPatternsAccessControl2007b,
  title = {Patterns for Access Control in Distributed Systems},
  booktitle = {Proceedings of the 14th {{Conference}} on {{Pattern Languages}} of {{Programs}} - {{PLOP}} '07},
  author = {Delessy, Nelly and Fernandez, Eduardo B. and {Larrondo-Petrie}, M. M. and Wu, Jie},
  year = {2007},
  pages = {1},
  publisher = {{ACM Press}},
  address = {{Monticello, Illinois}},
  doi = {10.1145/1772070.1772074},
  abstract = {Distributed systems introduce a new variety of security threats. The organizations that own those systems must protect their information assets from attacks. To do this we need to start with high-level models that represent the security policies of the institution. We present patterns that derive from traditional models: first, the Policy-Based Access Control which models how to decide if a subject is authorized to access an object according to policies defined in a central policy repository. Then we present implementation-oriented patterns that implement the Access Matrix or RBAC model: The ACL pattern allows control access to objects by indicating which subjects can access an object and in what way. There is usually an ACL associated with each object. The Capability pattern allows control access to objects by providing a credential or ticket to be given to a subject for accessing an object in a specific way. Capabilities are given to the principal.},
  isbn = {978-1-60558-411-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\ADG43LGR\\Delessy et al. - 2007 - Patterns for access control in distributed systems.pdf}
}

@inproceedings{edgeImprovingSecurityDesign2012a,
  title = {Improving Security Design Patterns with Aspect-Oriented Strategies},
  booktitle = {Proceedings of the 50th {{Annual Southeast Regional Conference}} on - {{ACM-SE}} '12},
  author = {Edge, Crystal and Mitropoulos, Francisco},
  year = {2012},
  pages = {24},
  publisher = {{ACM Press}},
  address = {{Tuscaloosa, Alabama}},
  doi = {10.1145/2184512.2184519},
  abstract = {Following the success of software engineering design patterns, security patterns are a promising approach to aid in the design and development of more secure software systems. At the same time, recent studies on aspect-oriented programming (AOP) suggest that software security concerns are good candidates for AOP techniques. Building upon the authors' previous work on aspectization of security patterns, this study contributes the development of aspect-oriented strategy sections for a set of webtier security patterns. It also adds to the small but growing body of quantitative evidence on the effects of aspectization on the modularity of security pattern code.},
  isbn = {978-1-4503-1203-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\DMJRXZ6Y\\Edge et Mitropoulos - 2012 - Improving security design patterns with aspect-ori.pdf}
}

@article{el-ramlyRuntimeBehaviorUsageb,
  title = {From {{Run-time Behavior}} to {{Usage Scenarios}}: {{An Interaction-Pattern Mining Approach}}},
  author = {{El-Ramly}, Mohammad and Stroulia, Eleni and Sorenson, Paul},
  pages = {10},
  abstract = {A key challenge facing IT organizations today is their evolution towards adopting e-business practices that gives rise to the need for reengineering their underlying software systems. Any reengineering effort has to be aware of the functional requirements of the subject system, in order not to violate the integrity of its intended uses. However, as software systems get regularly maintained throughout their lifecycle, the documentation of their requirements often become obsolete or get lost. To address this problem of ``software requirements loss'', we have developed an interaction-pattern mining method for the recovery of functional requirements as usage scenarios. Our method analyzes traces of the run-time system-user interaction to discover frequently recurring patterns; these patterns correspond to the functionality currently exercised by the system users, represented as usage scenarios. The discovered scenarios provide the basis for reengineering the software system into web-accessible components, each one supporting one of the discovered scenarios. In this paper, we describe IPM2, our interaction-pattern discovery algorithm, we illustrate it with a case study from a real application and we give an overview of the reengineering process in the context of which it is employed.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\MEDIQKAD\\El-Ramly et al. - From Run-time Behavior to Usage Scenarios An Inte.pdf}
}

@inproceedings{engelModelPatternbasedApproach2010,
  title = {A Model- and Pattern-Based Approach for Development of User Interfaces of Interactive Systems},
  booktitle = {Proceedings of the 2nd {{ACM SIGCHI}} Symposium on {{Engineering}} Interactive Computing Systems - {{EICS}} '10},
  author = {Engel, J{\"u}rgen},
  year = {2010},
  pages = {337},
  publisher = {{ACM Press}},
  address = {{Berlin, Germany}},
  doi = {10.1145/1822018.1822075},
  abstract = {This paper introduces the subject of my PhD thesis, a framework for pattern-based modeling, generation and usability evaluation of interactive systems. It describes the structural aspects of HCI pattern languages and how such languages and patterns for various modeling stages (e.g. task modeling) and abstraction levels can be exploited to automate part of the software development process for interactive applications. The main aspects and the general functionality of the framework as well as the supported development processes are discussed.},
  isbn = {978-1-4503-0083-4},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\CEMIKV2P\\Engel - 2010 - A model- and pattern-based approach for developmen.pdf}
}

@inproceedings{fantBuildingDomainSpecific2011,
  title = {Building Domain Specific Software Architectures from Software Architectural Design Patterns},
  booktitle = {Proceedings of the 33rd {{International Conference}} on {{Software Engineering}}},
  author = {Fant, Julie Street},
  year = {2011},
  month = may,
  pages = {1152--1154},
  publisher = {{ACM}},
  address = {{Waikiki, Honolulu HI USA}},
  doi = {10.1145/1985793.1986026},
  abstract = {Software design patterns are best practice solutions to common software problems. However, applying design patterns in practice can be difficult since design pattern descriptions are general and can be applied at multiple levels of abstraction. In order to address the aforementioned issue, this research focuses on creating a systematic approach to designing domain specific distributed, real-time and embedded (DRE) software from software architectural design patterns. To address variability across a DRE domain, software product line concepts are used to categorize and organize the features and design patterns. The software architectures produced are also validated through design time simulation. This research is applied and validated using the space flight software (FSW) domain.},
  isbn = {978-1-4503-0445-0},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\R6NN4WT9\\Fant - 2011 - Building domain specific software architectures fr.pdf}
}

@inproceedings{fantSoftwareProductLine2012,
  title = {Software Product Line Engineering of Space Flight Software},
  booktitle = {2012 {{Third International Workshop}} on {{Product LinE Approaches}} in {{Software Engineering}} ({{PLEASE}})},
  author = {Fant, Julie Street and Gomaa, Hassan and Pettit, Robert G.},
  year = {2012},
  month = jun,
  pages = {41--44},
  publisher = {{IEEE}},
  address = {{Zurich, Switzerland}},
  doi = {10.1109/PLEASE.2012.6229769},
  abstract = {This paper presents a practical solution to a reallife industrial problem in the unmanned space flight software (FSW) domain using software product lines and software architectural design patterns. In the FSW domain, there exists a significant amount of variability in the required capabilities. For example, some FSW have a significant amount of hardware to control and operate in a nearly autonomous fashion. In contrast, other FSW have a small amount of hardware to control and rely heavily of commanding from the ground station to operate the spacecraft. The underlying architecture and component interactions needed for the different FSWs are quite different. This amount of architectural variability makes it difficult to develop a SPL architecture that covers the all possible variability in the FSW domain. Therefore, this paper presents a practical solution to this real world problem that leverages software product line concepts and software architectural design patterns.},
  isbn = {978-1-4673-1751-1 978-1-4673-1750-4},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\XGDYHJUH\\Fant et al. - 2012 - Software product line engineering of space flight .pdf}
}

@inproceedings{fariasDistributedTestAgents2012a,
  title = {Distributed Test Agents: A Pattern for the Development of Automatic System Tests for Distributed Applications},
  shorttitle = {Distributed Test Agents},
  booktitle = {Proceedings of the 9th {{Latin-American Conference}} on {{Pattern Languages}} of {{Programming}} - {{SugarLoafPLoP}} '12},
  author = {Farias, Giovanni and Dantas, Ayla and Lopes, Raquel and Guerrero, Dalton},
  year = {2012},
  pages = {1--11},
  publisher = {{ACM Press}},
  address = {{Natal, Rio Grande do Norte, Brazil}},
  doi = {10.1145/2591028.2600817},
  isbn = {978-1-4503-2787-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\EDNET65V\\Farias et al. - 2012 - Distributed test agents a pattern for the develop.pdf}
}

@inproceedings{fernandezTwoSecurityPatterns2011a,
  title = {Two Security Patterns: Least Privilege and Security Logger and Auditor},
  shorttitle = {Two Security Patterns},
  booktitle = {Proceedings of the 2nd {{Asian Conference}} on {{Pattern Languages}} of {{Programs}} - {{AsianPLoP}} '11},
  author = {Fernandez, Eduardo B. and Mujica, Sergio and Valenzuela, Francisca},
  year = {2011},
  pages = {1--6},
  publisher = {{ACM Press}},
  address = {{Tokyo, Japan}},
  doi = {10.1145/2524629.2524638},
  abstract = {We present here two security patterns that describe fundamental aspects: Least Privilege-- How can we minimize misuses by the users or workers of an institution? Give the users or the executing processes of a system the rights they need to perform their functions and no more. Security Logger/Auditor-- How can we keep track of user's actions in order to determine who did what and when? Log all security-sensitive actions performed by users and provide controlled access to records for Audit purposes.},
  isbn = {978-1-4503-2109-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\E75F9MQ9\\Fernandez et al. - 2011 - Two security patterns least privilege and securit.pdf}
}

@inproceedings{fernandezTwoSecurityPatterns2011a,
  title = {Two Security Patterns: Least Privilege and Security Logger and Auditor},
  shorttitle = {Two Security Patterns},
  booktitle = {Proceedings of the 2nd {{Asian Conference}} on {{Pattern Languages}} of {{Programs}} - {{AsianPLoP}} '11},
  author = {Fernandez, Eduardo B. and Mujica, Sergio and Valenzuela, Francisca},
  year = {2011},
  pages = {1--6},
  publisher = {{ACM Press}},
  address = {{Tokyo, Japan}},
  doi = {10.1145/2524629.2524638},
  abstract = {We present here two security patterns that describe fundamental aspects: Least Privilege-- How can we minimize misuses by the users or workers of an institution? Give the users or the executing processes of a system the rights they need to perform their functions and no more. Security Logger/Auditor-- How can we keep track of user's actions in order to determine who did what and when? Log all security-sensitive actions performed by users and provide controlled access to records for Audit purposes.},
  isbn = {978-1-4503-2109-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\E75F9MQ9\\Fernandez et al. - 2011 - Two security patterns least privilege and securit.pdf}
}
@inproceedings{fernandezEvenMorePatterns2006b,
  title = {Even More Patterns for Secure Operating Systems},
  booktitle = {Proceedings of the 2006 Conference on {{Pattern}} Languages of Programs - {{PLoP}} '06},
  author = {Fernandez, Eduardo B. and Sorgente, Tami and {Larrondo-Petrie}, Maria M.},
  year = {2006},
  pages = {1},
  publisher = {{ACM Press}},
  address = {{Portland, Oregon}},
  doi = {10.1145/1415472.1415484},
  abstract = {An operating system (OS) interacts with the hardware and supports the execution of all the applications. As a result, its security is very critical. Many of the reported attacks to Internetbased systems have occurred through the OS (kernel and utilities). The security of individual execution time actions such as process creation, memory protection, and the general architecture of the OS are very important and we have previously presented patterns for these functions. We present here patterns for the representation of processes and threads, emphasizing their security aspects. Another pattern considers the selection of virtual address space structure. We finally present a pattern to control the power of administrators, a common source of security problems.},
  isbn = {978-1-60558-372-3},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\DMV4G2AZ\\Fernandez et al. - 2006 - Even more patterns for secure operating systems.pdf}
}

@inproceedings{ferreiraPatternsDataMetadata2008a,
  title = {Patterns for Data and Metadata Evolution in Adaptive Object-Models},
  booktitle = {Proceedings of the 15th {{Conference}} on {{Pattern Languages}} of {{Programs}} - {{PLoP}} '08},
  author = {Ferreira, Hugo Sereno and Correia, Filipe Figueiredo and Welicki, Leon},
  year = {2008},
  pages = {1},
  publisher = {{ACM Press}},
  address = {{Nashville, Tennessee}},
  doi = {10.1145/1753196.1753203},
  abstract = {An Adaptive Object-Model (AOM) is an architectural pattern based upon a dynamic meta-modeling technique where the object model of the system is explicitly defined as data to be interpreted at run-time. The object model encompasses the full specification of domain objects, states, events, conditions, constraints and business rules. Several design patterns, that have before been documented, describe a set of good-practices within this domain. This paper approaches data and metadata evolution issues in the context of AOMs, by describing three additional patterns \textemdash{} History of Operations, System Memento and Migration. They establish ways to track, version, and evolve information, at the several abstraction levels that may exist in an AOM.},
  isbn = {978-1-60558-151-4},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\QA7SCKQW\\Ferreira et al. - 2008 - Patterns for data and metadata evolution in adapti.pdf}
}

@inproceedings{gomaaDynamicSelfadaptationDistributed2012,
  title = {Dynamic Self-Adaptation for Distributed Service-Oriented Transactions},
  booktitle = {2012 7th {{International Symposium}} on {{Software Engineering}} for {{Adaptive}} and {{Self-Managing Systems}} ({{SEAMS}})},
  author = {Gomaa, Hassan and Hashimoto, Koji},
  year = {2012},
  month = jun,
  pages = {11--20},
  publisher = {{IEEE}},
  address = {{Zurich, Switzerland}},
  doi = {10.1109/SEAMS.2012.6224386},
  abstract = {Dynamic software adaptation addresses software systems that need to change their behavior during execution. To address reuse in dynamic software adaptation, software adaptation patterns, also referred to as software reconfiguration patterns, have been developed. A software adaptation pattern defines how a set of components that make up an architecture or design pattern dynamically cooperate to change the software configuration to a new configuration given a set of adaptation commands. This paper describes a dynamic self-adaptation pattern for distributed transaction management in service-oriented applications.},
  isbn = {978-1-4673-1787-0 978-1-4673-1788-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\HNIILFQX\\Gomaa et Hashimoto - 2012 - Dynamic self-adaptation for distributed service-or.pdf}
}

@inproceedings{gomaaSoftwareAdaptationPatterns2010,
  title = {Software Adaptation Patterns for Service-Oriented Architectures},
  booktitle = {Proceedings of the 2010 {{ACM Symposium}} on {{Applied Computing}} - {{SAC}} '10},
  author = {Gomaa, Hassan and Hashimoto, Koji and Kim, Minseong and Malek, Sam and Menasc{\'e}, Daniel A.},
  year = {2010},
  pages = {462},
  publisher = {{ACM Press}},
  address = {{Sierre, Switzerland}},
  doi = {10.1145/1774088.1774185},
  abstract = {This paper describes the concept of software adaptation patterns and how they can be used in software adaptation of serviceoriented architectures. The patterns are described in terms of a three-layer architecture for self-management. A software adaptation pattern defines how a set of components that make up an architecture pattern dynamically cooperate to change the software configuration to a new configuration. In our approach, adaptation connectors are introduced to encapsulate adaptation state machine models so that the adaptation patterns can be more reusable. A change management model for dynamically evolving service-oriented applications is also described with a case study.},
  isbn = {978-1-60558-639-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\7ELFS84T\\Gomaa et al. - 2010 - Software adaptation patterns for service-oriented .pdf}
}


@article{harrisonArchitecturePatternsWebb,
  title = {Architecture {{Patterns}} of {{Web Services Applications}}},
  author = {Harrison, Neil B},
  pages = {15},
  abstract = {With the advent of web services platforms, the architectures of applications deployed on these platforms have evolved from architectures found in early software systems. A study of reference architectures provided by Amazon Web Services showed eight architecture patterns. These patterns are similar to the original software architecture patterns, but they may be sufficiently different to be considered separate patterns in their own right. If they are not new patterns, it is still worthwhile to document them as modern uses of legacy architecture patterns. This paper briefly describes the patterns found and gives their frequency. It also describes three of the web services architecture patterns in detail.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\FNTTCLFF\\Harrison - Architecture Patterns of Web Services Applications.pdf}
}

@inproceedings{hassoHassoCarlson20132013,
  title = {Hasso et {{Carlson}} - 2013 - {{Design}} Patterns as First-Class Connectors.Pdf},
  booktitle = {Proceedings of the 2nd Annual Conference on {{Research}} in Information Technology},
  author = {Hasso, Sargon and Carlson, Carl},
  year = {2013},
  month = oct,
  pages = {1--7},
  publisher = {{ACM}},
  address = {{Orlando, Florida, USA}},
  doi = {10.1145/2512209.2512219},
  isbn = {978-1-4503-2494-6},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\RYCBIDEG\\Hasso et Carlson - 2013 - Design patterns as first-class connectors.pdf}
}


@inproceedings{jonesDimensionalModelingIdentifying2005,
  title = {Dimensional Modeling: Identifying, Classifying \& Applying Patterns},
  shorttitle = {Dimensional Modeling},
  booktitle = {Proceedings of the 8th {{ACM}} International Workshop on {{Data}} Warehousing and {{OLAP}}  - {{DOLAP}}},
  author = {Jones, Mary Elizabeth and Song, Il-Yeol},
  year = {2005},
  pages = {29},
  publisher = {{ACM Press}},
  address = {{Bremen, Germany}},
  doi = {10.1145/1097002.1097008},
  abstract = {Software design is a complex activity. A successful designer requires knowledge and training in specific design techniques combined with practical experience. Designing a dimensional model embodies this challenge. This paper presents Dimensional Design Patterns (DDPs) and their applications to the design of dimensional models. We describe a metamodel of the DDPs and show their integration into Kimball's dimensional modeling design process so they can be applied to design problems using a known practice. By providing a metamodel and a method for DDP use, we combine theory and a practical design technique with the goal of increasing the efficiency and effectiveness of the software designer. The initial experimental results regarding the classroom use of DDPs revealed a significant increase in the efficiency of students to design a dimensional model, but more testing is necessary in order to evaluate the effectiveness measure.},
  isbn = {978-1-59593-162-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\PB3TDNFC\\Jones et Song - 2005 - Dimensional modeling identifying, classifying & a.pdf}
}

@inproceedings{seidlGenerativeSoftwareProduct2015,
  title = {Generative Software Product Line Development Using Variability-Aware Design Patterns},
  booktitle = {Proceedings of the 2015 {{ACM SIGPLAN International Conference}} on {{Generative Programming}}: {{Concepts}} and {{Experiences}}},
  author = {Seidl, Christoph and Schuster, Sven and Schaefer, Ina},
  year = {2015},
  month = oct,
  pages = {151--160},
  publisher = {{ACM}},
  address = {{Pittsburgh PA USA}},
  doi = {10.1145/2814204.2814212},
  abstract = {Software Product Lines (SPLs) are an approach to reuse in-the-large that models a set of closely related software systems in terms of commonalities and variabilities. Design patterns are best practices for addressing recurring design problems in object-oriented source code. In the practice of implementing an SPL, instances of certain design patterns are employed to handle variability, which makes these ``variability-aware design patterns'' a best practice for SPL design. However, there currently is no dedicated method for proactively developing SPLs using design patterns suitable for realizing variable functionality. In this paper, we present a method to perform generative SPL development with design patterns. We use role models to capture design patterns and their relation to a variability model. We further allow mapping of individual design pattern roles to elements of realization artifacts to be generated (e.g., classes, methods) and check the conformance of the realization with the specification of the pattern. With this method, we support proactive development of SPLs using design patterns to apply best practices for the realization of variability. We present an implementation of our approach within the Eclipse IDE and demonstrate it within a case study.},
  isbn = {978-1-4503-3687-1},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\G3ZFZAZ3\\Seidl et al. - 2015 - Generative software product line development using.pdf}
}

@article{senthilImprovedComponentModel2007,
  title = {An Improved Component Model for Component Based Software Engineering},
  author = {Senthil, R. and Kushwaha, D. S. and Misra, A. K.},
  year = {2007},
  month = jul,
  journal = {ACM SIGSOFT Software Engineering Notes},
  volume = {32},
  number = {4},
  pages = {9},
  issn = {0163-5948},
  doi = {10.1145/1281421.1281431},
  abstract = {This paper focuses on Component Based Software Engineering (CBSE) and generic connectors for the software components. An attempt has been made to describe n-tier architecture; in particular, data access architecture in a component based application. It attempts to express how data access objects interact with business-tier and data-tier in achieving reusable, robust and scalable component based architecture by implementing Data Adapter interface. It has been able to establish that code efficiency increases when data access object implements the data adapter interface by performing unit test on the code. It has also been able to show that there exists a loose coupling in the component based architecture.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\JS6WH5VL\\Senthil et al. - 2007 - An improved component model for component based so.pdf}
}

@inproceedings{singhAnyCorrectiveActionStableDesign2010c,
  title = {The {{AnyCorrectiveAction}} Stable Design Pattern},
  booktitle = {Proceedings of the 17th {{Conference}} on {{Pattern Languages}} of {{Programs}} - {{PLOP}} '10},
  author = {Singh, Shivanshu K. and Fayad, Mohamed E.},
  year = {2010},
  pages = {1--20},
  publisher = {{ACM Press}},
  address = {{Reno, Nevada}},
  doi = {10.1145/2493288.2493312},
  abstract = {The stable design pattern AnyCorrectiveAction is based on the term Corrective Action [1], which generally refers to any counter measure taken by any party, who seeks Maintenance by the solution to any problem. Maintenance can be of different types: Preventive, Adaptive, Predictive and Corrective. Any Party decides upon taking any Corrective action, based on any evidence and the reason, and also the criteria that govern it. It involves one or more counter measures taken to prevent the recurrence of the problem or the reason for the corrective action. At the end of it, a log is produced, which serves as a basis for verification of the fact that the corrective action has been accomplished and it meets the ultimate goal of maintenance. This paper aims at applying the Software Stability Model [2] approach towards modeling a system that has to perform maintenance, by employing a Corrective Action and come up with a stable pattern, which can form a part of such a system, focusing at applying corrective action in a holistic way, rather than tying it on only one application specific context, which might cause potential impedance mismatch between process and workflows at a later stage. The Software Stability Model ensures high reusability, ensuring that a design once created can be used to model any application, in any domain, thus making the task of designing more efficient, and the modeled system, largely domain independent [3]. The goal of this paper is to design a Stable Pattern for Corrective Action and to model the system on the basis on an Enduring Business Theme. Here, the ultimate goal or the EBT is Maintenance and AnyCorrective action is what acts as a workhorse to achieve the goal of maintenance. In this paper, we have first designed a model, which defines the relationship between the Enduring Business Theme through Business Objects. We have then gone ahead with modeling an application scenario, which portrays the reusability of the developed stable pattern. A comparison of the Traditional Model and the Stable Model has also been included to describe how the latter overcomes to drawbacks of the former. Different models, such as, use cases, CRC cards, class diagrams and sequence diagrams have been used to give a better insight into the pattern and possible applications of it.},
  isbn = {978-1-4503-0107-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\FXL3YS68\\Singh et Fayad - 2010 - The AnyCorrectiveAction stable design pattern.pdf}
}

@inproceedings{slotosStarPatternRepresenting2016a,
  title = {The Star Pattern: Representing Domain Concepts in a Uniform Way},
  shorttitle = {The Star Pattern},
  booktitle = {Proceedings of the 21st {{European Conference}} on {{Pattern Languages}} of {{Programs}}},
  author = {Slotos, Thomas},
  year = {2016},
  month = jul,
  pages = {1--11},
  publisher = {{ACM}},
  address = {{Kaufbeuren Germany}},
  doi = {10.1145/3011784.3011792},
  isbn = {978-1-4503-4074-8},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\BF6MH9U8\\Slotos - 2016 - The star pattern representing domain concepts in .pdf}
}


@inproceedings{solmsExperiencesUsingSystematic2013,
  title = {Experiences with Using the Systematic Method for Architecture Recovery ({{SyMAR}})},
  booktitle = {Proceedings of the {{South African Institute}} for {{Computer Scientists}} and {{Information Technologists Conference}} on - {{SAICSIT}} '13},
  author = {Solms, Fritz},
  year = {2013},
  pages = {170},
  publisher = {{ACM Press}},
  address = {{East London, South Africa}},
  doi = {10.1145/2513456.2513505},
  abstract = {This paper provides an introduces the Systematic Method for software Architecture Recovery (SyMAR) and discusses some experiences in applying the method to an industrial case study.},
  isbn = {978-1-4503-2112-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\9LAAEUD7\\Solms - 2013 - Experiences with using the systematic method for a.pdf}
}

@inproceedings{sousaEngineeringSoftwareCloud2018d,
  title = {Engineering {{Software}} for the {{Cloud}}: {{Automated Recovery}} and {{Scheduler}}},
  shorttitle = {Engineering {{Software}} for the {{Cloud}}},
  booktitle = {Proceedings of the 23rd {{European Conference}} on {{Pattern Languages}} of {{Programs}}},
  author = {Sousa, Tiago Boldt and Ferreira, Hugo Sereno and Correia, Filipe Figueiredo and Aguiar, Ademar},
  year = {2018},
  month = jul,
  pages = {1--8},
  publisher = {{ACM}},
  address = {{Irsee Germany}},
  doi = {10.1145/3282308.3282315},
  abstract = {Cloud software continues to expand globally, highly motivated by how widespread the Internet is and the possibilities it unlocks with cloud computing. Still, cloud development has some intrinsic properties to it, making it complex to unexperienced developers. This research is capturing those intricacies in the form of a pattern language that gathers ten patterns for engineering software for the cloud. This paper elaborates on that research by contributing with two new patterns: Automated Recovery, which checks if a container is working properly, automatically recovering it in case of failure and Scheduler, which periodically executes actions within the infrastructure.},
  isbn = {978-1-4503-6387-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\LGA7JBPP\\Sousa et al. - 2018 - Engineering Software for the Cloud Automated Reco.pdf}
}

@inproceedings{sousaEngineeringSoftwareCloud2018e,
  title = {Engineering {{Software}} for the {{Cloud}}: {{External Monitoring}} and {{Failure Injection}}},
  shorttitle = {Engineering {{Software}} for the {{Cloud}}},
  booktitle = {Proceedings of the 23rd {{European Conference}} on {{Pattern Languages}} of {{Programs}}},
  author = {Sousa, Tiago Boldt and Ferreira, Hugo Sereno and Correia, Filipe Figueiredo and Aguiar, Ademar},
  year = {2018},
  month = jul,
  pages = {1--8},
  publisher = {{ACM}},
  address = {{Irsee Germany}},
  doi = {10.1145/3282308.3282316},
  abstract = {Cloud software continues to expand globally, highly motivated by how widespread the Internet is and the possibilities it unlocks with cloud computing. Still, cloud development has some intrinsic properties to it, making it complex to unexperienced developers. This research is capturing those intricacies in the form of a pattern language, gathering ten patterns for engineering software for the cloud. This paper elaborates on that research by contributing with two new patterns: External Monitoring, which continuously monitors the system as a black box, validating its status and Failure Injection, which continuously verifies system reliability by injecting failures into the cloud environment and confirming that the system recovers from it.},
  isbn = {978-1-4503-6387-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\8TQ27SSD\\Sousa et al. - 2018 - Engineering Software for the Cloud External Monit.pdf}
}

@inproceedings{sousa2018engineering,
  title={Engineering software for the cloud: External monitoring and failure injection},
  author={Sousa, Tiago Boldt and Ferreira, Hugo Sereno and Correia, Filipe Figueiredo and Aguiar, Ademar},
  booktitle={Proceedings of the 23rd European Conference on Pattern Languages of Programs},
  pages={1--8},
  year={2018}
}

@inproceedings{sunSun2014Querying2014,
  title = {Sun et al. - 2014 - {{Querying}} Sequential Software Engineering Data.Pdf},
  booktitle = {Proceedings of the 22nd {{ACM SIGSOFT International Symposium}} on {{Foundations}} of {{Software Engineering}}},
  author = {Sun, Chengnian and Zhang, Haidong and Lou, Jian-Guang and Zhang, Hongyu and Wang, Qiang and Zhang, Dongmei and Khoo, Siau-Cheng},
  year = {2014},
  month = nov,
  pages = {1--11},
  publisher = {{ACM}},
  address = {{Hong Kong China}},
  doi = {10.1145/2635868.2635902},
  isbn = {978-1-4503-3056-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\3IS6WH3A\\Sun et al. - 2014 - Querying sequential software engineering data.pdf}
}


@article{syedSecureSoftwareContainerb,
  title = {The {{Secure Software Container Pattern}}},
  author = {Syed, Madiha H and Fernandez, Eduardo B and Silva, Paulina},
  pages = {7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\6I3U4NF9\\Syed et al. - The Secure Software Container Pattern.pdf}
}

@inproceedings{syeedPluggableSystemsArchitectural2015,
  title = {Pluggable {{Systems}} as {{Architectural Pattern}}: {{An Ecosystemability Perspective}}},
  shorttitle = {Pluggable {{Systems}} as {{Architectural Pattern}}},
  booktitle = {Proceedings of the 2015 {{European Conference}} on {{Software Architecture Workshops}}},
  author = {Syeed, M. M. Mahbubul and Lokhman, Alexander and Mikkonen, Tommi and Hammouda, Imed},
  year = {2015},
  month = sep,
  pages = {1--6},
  publisher = {{ACM}},
  address = {{Dubrovnik Cavtat Croatia}},
  doi = {10.1145/2797433.2797477},
  abstract = {In this paper we review the use of plug-in architectures as a technological platform for software ecosystems. Our observation is that the software community has viewed and used plug-ins as powerful extension mechanisms offering a wide range of quality properties. Looking beyond such lowlevel technical interpretation, we argue that pluggable systems should be perceived and treated as a higher level architectural pattern. In order to back our perspective we present the pattern following widely adopted documentation scheme, we show example usage of the pattern in the Eclipse ecosystem, and we discuss different implementation options of the pattern when building new technical solutions for ecosystems.},
  isbn = {978-1-4503-3393-1},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\Q9NHTSY6\\Syeed et al. - 2015 - Pluggable Systems as Architectural Pattern An Eco.pdf}
}


@inproceedings{tekinMiningObjectorientedDesign2012,
  title = {Mining Object-Oriented Design Models for Detecting Identical Design Structures},
  booktitle = {2012 6th {{International Workshop}} on {{Software Clones}} ({{IWSC}})},
  author = {Tekin, Umut and Erdemir, Ural and Buzluca, Feza},
  year = {2012},
  month = jun,
  pages = {43--49},
  publisher = {{IEEE}},
  address = {{Zurich, Switzerland}},
  doi = {10.1109/IWSC.2012.6227865},
  abstract = {The object-oriented design is the most popular design methodology of the last twenty-five years. Several design patterns and principles are defined to improve the design quality of object-oriented software systems. In addition, designers can use unique design motifs which are particular for the specific application domain. Another common habit is cloning and modifying some parts of the software while creating new modules. Therefore, object-oriented programs can include many identical design structures. This work proposes a sub-graph mining based approach to detect identical design structures in object-oriented systems. By identifying and analyzing these structures, we can obtain useful information about the design, such as commonly-used design patterns, most frequent design defects, domain-specific patterns, and design clones, which may help developers to improve their knowledge about the software architecture. Furthermore, problematic parts of frequent identical design structures are the appropriate refactoring opportunities because they affect multiple areas of the architecture. Experiments with several open-source projects show that we can successfully find many identical design structures in each project. We observe that usually most of the identical structures are an implementation of common design patterns; however we also detect various anti-patterns, domain-specific patterns, and design-level clones.},
  isbn = {978-1-4673-1795-5 978-1-4673-1794-8},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\DDD4PQSU\\Tekin et al. - 2012 - Mining object-oriented design models for detecting.pdf}
}


@article{turcksinWorkStreamDesignPattern2016,
  title = {{{{\emph{WorkStream}}}} -- {{A Design Pattern}} for {{Multicore-Enabled Finite Element Computations}}},
  author = {Turcksin, Bruno and Kronbichler, Martin and Bangerth, Wolfgang},
  year = {2016},
  month = aug,
  journal = {ACM Transactions on Mathematical Software},
  volume = {43},
  number = {1},
  pages = {1--29},
  issn = {0098-3500, 1557-7295},
  doi = {10.1145/2851488},
  abstract = {Many operations that need to be performed in modern finite element codes can be described as an operation that needs to be done independently on every cell, followed by a reduction of these               local               results into a               global               data structure. For example, matrix assembly, estimating discretization errors, or converting nodal values into data structures that can be output in visualization file formats all fall into this class of operations. Using this realization, we identify a software design pattern that we call               WorkStream               and that can be used to model such operations and enables the use of multicore shared memory parallel processing. We also describe in detail how this design pattern can be efficiently implemented, and we provide numerical scalability results from its use in the               deal               .II software library.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\X42427ZQ\\Turcksin et al. - 2016 - WorkStream -- A Design Pattern for Multicor.pdf}
}

@inproceedings{vanwagensveldIntraTaskParallelismAutomotive2018a,
  title = {Intra-{{Task Parallelism}} in {{Automotive Real-Time Systems}}},
  booktitle = {Proceedings of the 9th {{International Workshop}} on {{Programming Models}} and {{Applications}} for {{Multicores}} and {{Manycores}}},
  author = {{van Wagensveld}, Remko and W{\"a}gemann, Tobias and Hehenkamp, Niklas and Kolagari, Ramin Tavakoli and Margull, Ulrich and Mader, Ralph},
  year = {2018},
  month = feb,
  pages = {61--70},
  publisher = {{ACM}},
  address = {{Vienna Austria}},
  doi = {10.1145/3178442.3178449},
  abstract = {Many recent Engine Management Systems (EMSs) have multicore processors. This results in new challenges for the developers of those systems, as most of them are not familiar with multicore programming. Additionally, many of the EMSs have real-time requirements, which need to be met. This paper introduces embedded parallel design patterns (ePDPs), which help developers solving common problems encountered when trying to parallelize legacy code for EMSs or embedded devices. We present a novel ePDP called Supercore Pattern. It helps to reduce the overhead introduced from forking or joining control graphs. To show the e\dbend ectiveness of this pattern we simulated and executed it on a real-world EMS and show that the pattern is able to reduce the response time of tasks with real-time requirements. This paper also presents concrete extensions to AUTOSAR, and EAST-ADL, to enable the modelling of the supercore pattern in automotive modelling standards.},
  isbn = {978-1-4503-5645-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\9AIQZ4E8\\van Wagensveld et al. - 2018 - Intra-Task Parallelism in Automotive Real-Time Sys.pdf}
}


@article{viljamaaReverseEngineeringFramework,
  title = {Reverse {{Engineering Framework Reuse Interfaces}}},
  author = {Viljamaa, Jukka},
  pages = {10},
  abstract = {Object-oriented application frameworks provide an established way of reusing the design and implementation of applications in a specific domain. Using a framework for creating applications is not a trivial task, however, and special tools are needed for supporting the process. Tool support, in turn, requires explicit specification of the reuse interfaces of frameworks. Unfortunately these specifications typically become quite extensive and complex for non-trivial frameworks. In this paper we discuss the possibility to reverse engineer a reuse interface specification from a framework's and its example applications' source code. We also introduce a programming environment that supports both making and using such specifications. In our environment, the reuse interface modeling is supported by a concept analysis based reverse engineering technique described in this paper.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\DX9GIPKX\\Viljamaa - Reverse Engineering Framework Reuse Interfaces.pdf}
}

@inproceedings{wangRecoveringDesignPatterns2012,
  title = {Recovering Design Patterns to Support Program Comprehension},
  booktitle = {Proceedings of the 2nd International Workshop on {{Evidential}} Assessment of Software Technologies - {{EAST}} '12},
  author = {Wang, Linzhang and Han, Zhixiong and He, Jiantao and Wang, Hanfei and Li, Xuandong},
  year = {2012},
  pages = {49},
  publisher = {{ACM Press}},
  address = {{Lund, Sweden}},
  doi = {10.1145/2372233.2372248},
  abstract = {This paper presents a design pattern directed software clustering approach to support program comprehension. First, the code is parsed to recover the design pattern information. Second, the code is clustered considering design patterns. Classes/interfaces are grouped into clusters based on their inter-role relationship of design patterns. Finally, a clusterlevel view of the original code is constructed to support understanding the code. A prototype tool TasteJ was implemented to support the automation of proposed approach. Experiments are conducted to evaluate the effectiveness of the approach. The experimental results show that the approach is encouraging and promising.},
  isbn = {978-1-4503-1509-8},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\Q7J8IB3U\\Wang et al. - 2012 - Recovering design patterns to support program comp.pdf}
}

@inproceedings{zdunArchitectingDecisionMaking2008,
  title = {Architecting as Decision Making with Patterns and Primitives},
  booktitle = {Proceedings of the 3rd International Workshop on {{Sharing}} and Reusing Architectural Knowledge  - {{SHARK}} '08},
  author = {Zdun, Uwe and Avgeriou, Paris and Hentrich, Carsten and Dustdar, Schahram},
  year = {2008},
  pages = {11},
  publisher = {{ACM Press}},
  address = {{Leipzig, Germany}},
  doi = {10.1145/1370062.1370066},
  abstract = {The application of patterns is used as a foundation for many central design decisions in software architecture, but because of the informal nature of patterns, these design decisions are usually not precisely documented in the models. In our earlier work, we had proposed pattern primitives as a solution to precisely model the patterns in the corresponding architectural views. Building upon that approach, this paper introduces a pattern-based architecting process that aims at inexpensively documenting design decisions in the architectural views alongside the natural flow of design. The decisions that are made explicit, concern the selection of patterns, their variants and the corresponding primitives, as well as the resolution of inconsistencies between the architectural views. The approach is demonstrated in the domain of process-driven SOA for two architectural views: Component-and-Connector and Process Flow.},
  isbn = {978-1-60558-038-8},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\IR9SXZ7G\\Zdun et al. - 2008 - Architecting as decision making with patterns and .pdf}
}

@article{zdunPatternbasedDesignServiceoriented2008a,
  title = {Pattern-Based Design of a Service-Oriented Middleware for Remote Object Federations},
  author = {Zdun, Uwe},
  year = {2008},
  month = may,
  journal = {ACM Transactions on Internet Technology},
  volume = {8},
  number = {3},
  pages = {1--38},
  issn = {1533-5399, 1557-6051},
  doi = {10.1145/1361186.1361191},
  abstract = {Service-oriented middleware architectures should enable the rapid realization of loosely coupled services. Unfortunately, existing technologies used for service-oriented middleware architectures, such as Web services, P2P systems, coordination and cooperation technologies, and spontaneous networking, do not fully support all requirements in the realm of loosely coupled business services yet. Typical problems that arise in many business domains are for instance missing central control, complex cooperation models, complex lookup models, or issues regarding dynamic deployment. We used a pattern-based approach to identify the well working solutions in the different technologies for loosely coupled services. Then we reused this design knowledge in our concept for a service-oriented middleware. This concept is centered around a controlled environment, called a federation. Each remote object (a peer service) is controlled in one or more federations, but within this environment peers can collaborate in a simple-to-use, loosely coupled, and ad hoc style of communication. A semantic lookup service is used to let the peers publish rich metadata about themselves to their fellow peers.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\VCX4R2VW\\Zdun - 2008 - Pattern-based design of a service-oriented middlew.pdf}
}








