%%%%%%%%%%%%%%%%%%%%%%%%%% Primary studies results of Snowballig (7 papers) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@article{belliniExpressingOrganizingRealtime2009,
  title = {Expressing and Organizing Real-Time Specification Patterns via Temporal Logics},
  author = {Bellini, P. and Nesi, P. and Rogai, D.},
  year = {2009},
  month = feb,
  journal = {Journal of Systems and Software},
  volume = {82},
  number = {2},
  pages = {183--196},
  issn = {01641212},
  doi = {10.1016/j.jss.2008.06.041},
  abstract = {Formal specification models provide support for the formal verification and validation of the system behaviour. This advantage is typically paid in terms of effort and time spent in learning and using formal methods and tools. The introduction and usage of patterns have a double impact. They stand for examples on how to cover classical problems with formal methods in many different notations, so that the user can shorten the time to understand if a formal method can be used to meet his purpose and how it can be used. Furthermore, they are used for shortening the specification time, by reusing and composing different patterns to cover the specification, thus producing more understandable specifications which refer to commonly known patterns. For these reasons, both interests in and usage of patterns are growing and a higher number of proposals for patterns and pattern classification/organisation has appeared in literature. This paper reports a review of the state of the art for real-time specification patterns, so as to organise them in a unified way, while providing some new patterns which complete the unified model. The proposed organization is based on some relationships among patterns as demonstrated in the paper. During the presentation the patterns have been formalised in TILCO-X, whereas in appendix a list of patterns with formalizations in several different logics such as TILCO, LTL, CTL, GIL, QRE, MTL, TCTL, RTGIL, is provided disguised as links to the locations where such formalizations can be recovered and/or are directly reported, if found not accessible in literature; this allows the reader to have a detailed view of all the classified patterns, including the ones already added. Furthermore, an example has been proposed to highlight the usefulness of the new identified patterns completing the unified model.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\9SSSSYAF\\Bellini et al. - 2009 - Expressing and organizing real-time specification .pdf}
}

@inproceedings{benmansourMARTEBasedDesignPattern2019,
  title = {A {{MARTE-Based Design Pattern}} for {{Adaptive Real-Time Embedded Systems}}:},
  shorttitle = {A {{MARTE-Based Design Pattern}} for {{Adaptive Real-Time Embedded Systems}}},
  booktitle = {Proceedings of the 14th {{International Conference}} on {{Evaluation}} of {{Novel Approaches}} to {{Software Engineering}}},
  author = {Ben Mansour, Ahmed and Naija, Mohamed and Ben Ahmed, Samir},
  year = {2019},
  pages = {242--248},
  publisher = {{SCITEPRESS - Science and Technology Publications}},
  address = {{Heraklion, Crete, Greece}},
  doi = {10.5220/0007673102420248},
  isbn = {978-989-758-375-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\8WKMI74L\\Ben Mansour et al. - 2019 - A MARTE-Based Design Pattern for Adaptive Real-Tim.pdf}
}

@inproceedings{armoushEffectivePatternRepresentation2008,
  title = {Effective {{Pattern Representation}} for {{Safety Critical Embedded Systems}}},
  booktitle = {2008 {{International Conference}} on {{Computer Science}} and {{Software Engineering}}},
  author = {Armoush, Ashraf and Salewski, Falk and Kowalewski, Stefan},
  year = {2008},
  pages = {91--97},
  publisher = {{IEEE}},
  address = {{Wuhan, China}},
  doi = {10.1109/CSSE.2008.739},
  abstract = {Design Patterns, which give abstract solutions to commonly recurring design problems, have been widely used in the software and hardware domain. This paper focuses on nonfunctional implications and side effects of the design patterns on safety critical applications, which are especially critical in embedded systems. We propose a pattern representation for safety critical embedded application design methods by including fields for the implications and side effects of the represented design pattern on the nonfunctional requirements of the safety critical applications. These requirements include safety, reliability, modifiability, cost, and execution time.},
  isbn = {978-0-7695-3336-0},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\E9ZKA5XH\\Armoush et al. - 2008 - Effective Pattern Representation for Safety Critic.pdf}
}

@inproceedings{konradRealtimeSpecificationPatterns2005,
  title = {Real-Time Specification Patterns},
  booktitle = {Proceedings. 27th {{International Conference}} on {{Software Engineering}}, 2005. {{ICSE}} 2005.},
  author = {Konrad, S. and Cheng, B.H.C.},
  year = {2005},
  pages = {372--381},
  publisher = {{IEEe}},
  address = {{St. Louis, MO, USA}},
  doi = {10.1109/ICSE.2005.1553580},
  abstract = {Embedded systems are pervasive and frequently used for critical systems with time-dependent functionality. Dwyer et al. have developed qualitative specification patterns to facilitate the specification of critical properties, such as those that must be satisfied by embedded systems. Thus far, no analogous repository has been compiled for realtime specification patterns. This paper makes two main contributions: First, based on an analysis of timing-based requirements of several industrial embedded system applications, we created real-time specification patterns in terms of three commonly used real-time temporal logics. Second, as a means to further facilitate the understanding of the meaning of a specification, we offer a structured English grammar that includes support for real-time properties. We illustrate the use of the real-time specification patterns in the context of property specifications of a real-world automotive embedded system.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\TT29J233\\Konrad et Cheng - 2005 - Real-time specification patterns.pdf}
}

@article{dwyerPatternsPropertySpecifications,
  title = {Patterns in {{Property Specifications}} for {{Finite-State Verification}}},
  author = {Dwyer, B and Avrunin, S and Corbett, James C},
  pages = {10},
  abstract = {Model checkers and other finite-state verification tools allow developers to detect certain kinds of errors automatically. Nevertheless, the transition of this technology from research to practice has been slow. While there are a number of potential causes for reluctance to adopt such formal methods, we believe that a primary cause is that practitioners are unfamiliar with specification processes, notations, and strategies. In a recent paper, we proposed a pattern-based approach to the presentation, codification and reuse of property specifications for finite-state verification. Since then, we have carried out a survey of available specifications, collecting over 500 examples of property specifications. We found that most are instances of our proposed patterns. Furthermore, we have updated our pattern system to accommodate new patterns and variations of existing patterns encountered in this survey. This paper reports the results of the survey and the current status of our pattern system.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\U3DHDXGS\\Dwyer et al. - Patterns in Property Specifications for Finite-Sta.pdf}
}

@incollection{mzidDPMPSoftwarePattern2013,
  title = {{{DPMP}}: {{A Software Pattern}} for {{Real-Time Tasks Merge}}},
  shorttitle = {{{DPMP}}},
  booktitle = {Modelling {{Foundations}} and {{Applications}}},
  author = {Mzid, Rania and Mraidha, Chokri and Mehiaoui, Asma and {Tucci-Piergiovanni}, Sara and Babau, Jean-Philippe and Abid, Mohamed},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Van Gorp, Pieter and Ritter, Tom and Rose, Louis M.},
  year = {2013},
  volume = {7949},
  pages = {101--117},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-39013-5_8},
  abstract = {In a model-driven development context, the refinement of the architectural model of a real-time application to a Real Time Operating System (RTOS) specific model is a challenging task. Indeed, the different design choices made to guarantee the application timing properties are not always implementable on the target RTOS. In particular, when the number of distinct priority levels used at the design level exceeds the number allowed by the RTOS for the considered application, this refinement becomes not possible. In this paper, we propose a software pattern called Distinct Priority Merge Pattern (DPMP) that automatically perform the re-factoring of the architectural model when this problem occurs. First, we give an heuristic algorithm describing this pattern and we show that this method is not always effective. Then, to address the limitations of the first method, we propose a MILP formulation of the DPMP pattern that allows to check whether a solution exists and gives the optimal one. The evaluation of the second method, allows to estimate a cost in terms of processor utilization increase during the deployment of an application on a given RTOS family characterized by the number of distinct priority levels that it offers.},
  isbn = {978-3-642-39012-8 978-3-642-39013-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\MWXFKVNI\\Mzid et al. - 2013 - DPMP A Software Pattern for Real-Time Tasks Merge.pdf}
}

@article{xuArchitecturalPatternNonfunctional,
  title = {An {{Architectural Pattern}} for {{Non-functional Dependability Requirements}}},
  author = {Xu, Lihua and Ziv, Hadar and Richardson, Debra and Alspaugh, Thomas A},
  pages = {6},
  abstract = {We address the research question of transforming dependability requirements into corresponding software architecture constructs, by proposing first that dependability needs can be classified into three types of requirements and second, an architectural pattern that allows requirements engineers and architects to map dependability requirements into three corresponding types of architectural components. The proposed pattern is general enough to work with existing requirements techniques and existing software architectural styles, including enterprise and product-line architectures.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\2V3R6GNW\\Xu et al. - An Architectural Pattern for Non-functional Depend.pdf}
}
