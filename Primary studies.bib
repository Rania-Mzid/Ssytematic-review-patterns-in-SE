%%%%%%% Primary studies collected from the ACM Library %%%%%%%%%%%%%%%%%%%%%%%
@inproceedings{al-obeidallahMLDAMultipleLevels2017,
  title = {{{MLDA}}: {{A Multiple Levels Detection Approach}} for {{Design Patterns Recovery}}},
  shorttitle = {{{MLDA}}},
  booktitle = {Proceedings of the {{International Conference}} on {{Compute}} and {{Data Analysis}} - {{ICCDA}} '17},
  author = {{Al-Obeidallah}, Mohammed and Petridis, Miltos and Kapetanakis, Stelios},
  year = {2017},
  pages = {33--40},
  publisher = {{ACM Press}},
  address = {{Lakeland, FL, USA}},
  doi = {10.1145/3093241.3093244},
  abstract = {Design patterns have a key role in the software development process. They describe both structure, behavior of classes and their relationships. During the maintenance phase, architects can benefit from knowing the underlying software design choices made during the implementation. Moreover, design patterns can improve software documentation, speed up the development process and enable large-scale reuse of software architectures. This paper presents a Multiple Levels Detection Approach (MLDA) to recover design pattern instances from Java source code. The novelty behind MLDA is its ability to extract design pattern instances based on a generated class level representation of an investigated system. Specifically, MLDA presents what is the so-called Structural Search Model (SSM) which incrementally builds the structure of each design pattern based on the generated source code model. As the experiment results illustrate, MLDA is able to extract 22 design patterns with reasonable detection accuracy.},
  isbn = {978-1-4503-5241-3},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\4EMTIZJG\\Al-Obeidallah et al. - 2017 - MLDA A Multiple Levels Detection Approach for Des.pdf}
}

@inproceedings{alebrahimProblemorientedSecurityPatterns2014b,
  title = {Problem-Oriented Security Patterns for Requirements Engineering},
  booktitle = {Proceedings of the 19th {{European Conference}} on {{Pattern Languages}} of {{Programs}} - {{EuroPLoP}} '14},
  author = {Alebrahim, Azadeh and Heisel, Maritta},
  year = {2014},
  pages = {1--17},
  publisher = {{ACM Press}},
  address = {{Irsee, Germany}},
  doi = {10.1145/2721956.2721963},
  isbn = {978-1-4503-3416-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\8JS63CT9\\Alebrahim et Heisel - 2014 - Problem-oriented security patterns for requirement.pdf}
}

@inproceedings{bernardiDeclarativeDesignPatternbased2014a,
  title = {Declarative Design Pattern-Based Development Using Aspect Oriented Programming},
  booktitle = {Proceedings of the 29th {{Annual ACM Symposium}} on {{Applied Computing}}},
  author = {Bernardi, Mario L. and Cimitile, Marta and Di Lucca, Giuseppe A.},
  year = {2014},
  month = mar,
  pages = {1625--1630},
  publisher = {{ACM}},
  address = {{Gyeongju Republic of Korea}},
  doi = {10.1145/2554850.2554993},
  isbn = {978-1-4503-2469-4},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\EX7FTBVF\\Bernardi et al. - 2014 - Declarative design pattern-based development using.pdf}
}

@inproceedings{bienGraphicalUserInterface2015b,
  title = {Graphical {{User Interface Variability Architecture Pattern}}},
  booktitle = {Proceedings of the {{Sixth International Symposium}} on {{Information}} and {{Communication Technology}}},
  author = {Bien, Ngo Huy and Thu, Tran Dan},
  year = {2015},
  month = dec,
  pages = {304--311},
  publisher = {{ACM}},
  address = {{Hue City Viet Nam}},
  doi = {10.1145/2833258.2833284},
  abstract = {Designing software applications for multiple tenants is challenging. The task is even harder when designing pure multitenancy applications that must support different customers using a single codebase and data store. One of the most common problems when developing these systems is to support different graphical user interface not only for different users but also tenants. This critical requirement also applies to context-aware applications in which different graphical user interface should be presented to each user according to the user's context or software components and platforms that should allow developers easily to create different looks and feel for their applications. In this paper, we propose an architecture pattern for modeling graphical user interface that support different customizations and configurations. The modularity, the reusability and the maintainability of the pattern were evaluated by qualitative analysis based on wellknown patterns used in the proposed architecture pattern. Real world systems were built to validate the applicability, the correctness, the security and the performance of the pattern. We believe that our pattern will be useful for software providers as well as normal organizations when building software components or software systems for different customers or creating multitenancy applications in a cloud-based environment or building context-aware applications.},
  isbn = {978-1-4503-3843-1},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\SV37CGTL\\Bien et Thu - 2015 - Graphical User Interface Variability Architecture .pdf}
}

@inproceedings{blomqvistExperimentsPatternbasedOntology2009a,
  title = {Experiments on Pattern-Based Ontology Design},
  booktitle = {Proceedings of the Fifth International Conference on {{Knowledge}} Capture - {{K-CAP}} '09},
  author = {Blomqvist, Eva and Gangemi, Aldo and Presutti, Valentina},
  year = {2009},
  pages = {41},
  publisher = {{ACM Press}},
  address = {{Redondo Beach, California, USA}},
  doi = {10.1145/1597735.1597743},
  abstract = {This paper addresses the evaluation of pattern-based ontology design through experiments. An initial method for reuse of content ontology design patterns (Content ODPs) was used by the participants during the experiments. Hypotheses considered include the usefulness of Content ODPs for ontology developers, and we additionally study in what respects they are useful and what open issues remain. The main conclusions are that Content ODPs are perceived as useful by ontology developers. The ontology quality is improved when Content ODPs are reused, coverage of the task increases, usability is improved, and common modelling mistakes can be avoided.},
  isbn = {978-1-60558-658-8},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\8IL4EWPN\\Blomqvist et al. - 2009 - Experiments on pattern-based ontology design.pdf}
}

@article{brownImplementationPatternsMicroservices,
  title = {Implementation {{Patterns}} for {{Microservices Architectures}}},
  author = {Brown, Kyle and Woolf, Bobby},
  pages = {35},
  abstract = {In this paper we describe a set of implementation patterns for building applications using microservices. We discuss the application types and requirements that lead to the n eed for microservices, examine different types of microservices, and discuss patterns required for implementing data storage and devops in a microservices environment.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\AMC5L6CA\\Brown et Woolf - Implementation Patterns for Microservices Architec.pdf}
}

@inproceedings{charalampidouTheoreticalModelCapturing2017,
  title = {A Theoretical Model for Capturing the Impact of Design Patterns on Quality: The Decorator Case Study},
  shorttitle = {A Theoretical Model for Capturing the Impact of Design Patterns on Quality},
  booktitle = {Proceedings of the {{Symposium}} on {{Applied Computing}}},
  author = {Charalampidou, Sofia and Ampatzoglou, Apostolus and Avgeriou, Paris and Sencer, Seren and Arvanitou, Elvira-Maria and Stamelos, Ioannis},
  year = {2017},
  month = apr,
  pages = {1231--1238},
  publisher = {{ACM}},
  address = {{Marrakech Morocco}},
  doi = {10.1145/3019612.3019781},
  abstract = {Design patterns are widely recognized as reusable solutions that can be applied for improving design quality. However, empirical results suggest that patterns may sometimes support and other times hurt a quality attribute. Thus, there is a need for guidance on when a pattern is beneficial and when it is not. To provide such guidance, we propose a theoretical model for understanding the effect of patterns on quality. The obtained results are expected to improve the theoretical body of knowledge on design patterns, and facilitate informed decision making about when to insert or remove a pattern from a system. As an example, we present and discuss the results of modeling and exploring the effect of Decorator instances on quality. The results suggest that Decorator instances that are not expected to evolve through the addition of components in composite objects decrease system cohesion and therefore, modularity and maintainability are weakened.},
  isbn = {978-1-4503-4486-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\GK4KMNJF\\Charalampidou et al. - 2017 - A theoretical model for capturing the impact of de.pdf}
}

@inproceedings{daoudiExploratoryStudyMVCbased2019,
  title = {An Exploratory Study of {{MVC-based}} Architectural Patterns in {{Android}} Apps},
  booktitle = {Proceedings of the 34th {{ACM}}/{{SIGAPP Symposium}} on {{Applied Computing}}},
  author = {Daoudi, Aymen and ElBoussaidi, Ghizlane and Moha, Naouel and Kpodjedo, S{\`e}gla},
  year = {2019},
  month = apr,
  pages = {1711--1720},
  publisher = {{ACM}},
  address = {{Limassol Cyprus}},
  doi = {10.1145/3297280.3297447},
  abstract = {Mobile app development now represents a significant part of the software industry, with Android being the largest ecosystem. Android development comes with its own design practices and templates (layouts, activities, etc.). Developers also use different established architectural patterns for designing interactive software such as MVC, MVP and MVVM. They implement these patterns based on their understanding and experience. Thus, the choice and the implementation of such patterns varies from a developer to another. To the best of our knowledge, there is no work that provides a comprehensive view of the use of these patterns in mobile apps. Moreover, there is no clear understanding of which pattern to use and what is the trend for designing mobile apps using such patterns. In this paper, we propose an automatic approach to identify which MVC-based architectural pattern (MVC, MVP and MVVM) is used predominantly in a given app. For this purpose, we defined each of these patterns through a number of heuristics according to the pattern's potential implementations within the Android framework. We conducted an empirical study on a large set of mobile apps downloaded from the Google Play Store. We found, not surprisingly, a dominance of the popular MVC pattern, a rare use of MVP while MVVM is almost unused and a significant number of apps do not follow any pattern. The empirical study also enabled us to analyse the use of these patterns by domain, size and last-update date of the apps. We observed that MVC has been the most used pattern over the past years and it continues to gain popularity, and that small-size apps are mostly the ones that do not use any pattern.},
  isbn = {978-1-4503-5933-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\HM8752MZ\\Daoudi et al. - 2019 - An exploratory study of MVC-based architectural pa.pdf}
}

@inproceedings{delessyPatternsAccessControl2007b,
  title = {Patterns for Access Control in Distributed Systems},
  booktitle = {Proceedings of the 14th {{Conference}} on {{Pattern Languages}} of {{Programs}} - {{PLOP}} '07},
  author = {Delessy, Nelly and Fernandez, Eduardo B. and {Larrondo-Petrie}, M. M. and Wu, Jie},
  year = {2007},
  pages = {1},
  publisher = {{ACM Press}},
  address = {{Monticello, Illinois}},
  doi = {10.1145/1772070.1772074},
  abstract = {Distributed systems introduce a new variety of security threats. The organizations that own those systems must protect their information assets from attacks. To do this we need to start with high-level models that represent the security policies of the institution. We present patterns that derive from traditional models: first, the Policy-Based Access Control which models how to decide if a subject is authorized to access an object according to policies defined in a central policy repository. Then we present implementation-oriented patterns that implement the Access Matrix or RBAC model: The ACL pattern allows control access to objects by indicating which subjects can access an object and in what way. There is usually an ACL associated with each object. The Capability pattern allows control access to objects by providing a credential or ticket to be given to a subject for accessing an object in a specific way. Capabilities are given to the principal.},
  isbn = {978-1-60558-411-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\ADG43LGR\\Delessy et al. - 2007 - Patterns for access control in distributed systems.pdf}
}

@inproceedings{edgeImprovingSecurityDesign2012a,
  title = {Improving Security Design Patterns with Aspect-Oriented Strategies},
  booktitle = {Proceedings of the 50th {{Annual Southeast Regional Conference}} on - {{ACM-SE}} '12},
  author = {Edge, Crystal and Mitropoulos, Francisco},
  year = {2012},
  pages = {24},
  publisher = {{ACM Press}},
  address = {{Tuscaloosa, Alabama}},
  doi = {10.1145/2184512.2184519},
  abstract = {Following the success of software engineering design patterns, security patterns are a promising approach to aid in the design and development of more secure software systems. At the same time, recent studies on aspect-oriented programming (AOP) suggest that software security concerns are good candidates for AOP techniques. Building upon the authors' previous work on aspectization of security patterns, this study contributes the development of aspect-oriented strategy sections for a set of webtier security patterns. It also adds to the small but growing body of quantitative evidence on the effects of aspectization on the modularity of security pattern code.},
  isbn = {978-1-4503-1203-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\DMJRXZ6Y\\Edge et Mitropoulos - 2012 - Improving security design patterns with aspect-ori.pdf}
}

@article{el-ramlyRuntimeBehaviorUsageb,
  title = {From {{Run-time Behavior}} to {{Usage Scenarios}}: {{An Interaction-Pattern Mining Approach}}},
  author = {{El-Ramly}, Mohammad and Stroulia, Eleni and Sorenson, Paul},
  pages = {10},
  abstract = {A key challenge facing IT organizations today is their evolution towards adopting e-business practices that gives rise to the need for reengineering their underlying software systems. Any reengineering effort has to be aware of the functional requirements of the subject system, in order not to violate the integrity of its intended uses. However, as software systems get regularly maintained throughout their lifecycle, the documentation of their requirements often become obsolete or get lost. To address this problem of ``software requirements loss'', we have developed an interaction-pattern mining method for the recovery of functional requirements as usage scenarios. Our method analyzes traces of the run-time system-user interaction to discover frequently recurring patterns; these patterns correspond to the functionality currently exercised by the system users, represented as usage scenarios. The discovered scenarios provide the basis for reengineering the software system into web-accessible components, each one supporting one of the discovered scenarios. In this paper, we describe IPM2, our interaction-pattern discovery algorithm, we illustrate it with a case study from a real application and we give an overview of the reengineering process in the context of which it is employed.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\MEDIQKAD\\El-Ramly et al. - From Run-time Behavior to Usage Scenarios An Inte.pdf}
}

@inproceedings{engelModelPatternbasedApproach2010,
  title = {A Model- and Pattern-Based Approach for Development of User Interfaces of Interactive Systems},
  booktitle = {Proceedings of the 2nd {{ACM SIGCHI}} Symposium on {{Engineering}} Interactive Computing Systems - {{EICS}} '10},
  author = {Engel, J{\"u}rgen},
  year = {2010},
  pages = {337},
  publisher = {{ACM Press}},
  address = {{Berlin, Germany}},
  doi = {10.1145/1822018.1822075},
  abstract = {This paper introduces the subject of my PhD thesis, a framework for pattern-based modeling, generation and usability evaluation of interactive systems. It describes the structural aspects of HCI pattern languages and how such languages and patterns for various modeling stages (e.g. task modeling) and abstraction levels can be exploited to automate part of the software development process for interactive applications. The main aspects and the general functionality of the framework as well as the supported development processes are discussed.},
  isbn = {978-1-4503-0083-4},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\CEMIKV2P\\Engel - 2010 - A model- and pattern-based approach for developmen.pdf}
}

@inproceedings{fantBuildingDomainSpecific2011,
  title = {Building Domain Specific Software Architectures from Software Architectural Design Patterns},
  booktitle = {Proceedings of the 33rd {{International Conference}} on {{Software Engineering}}},
  author = {Fant, Julie Street},
  year = {2011},
  month = may,
  pages = {1152--1154},
  publisher = {{ACM}},
  address = {{Waikiki, Honolulu HI USA}},
  doi = {10.1145/1985793.1986026},
  abstract = {Software design patterns are best practice solutions to common software problems. However, applying design patterns in practice can be difficult since design pattern descriptions are general and can be applied at multiple levels of abstraction. In order to address the aforementioned issue, this research focuses on creating a systematic approach to designing domain specific distributed, real-time and embedded (DRE) software from software architectural design patterns. To address variability across a DRE domain, software product line concepts are used to categorize and organize the features and design patterns. The software architectures produced are also validated through design time simulation. This research is applied and validated using the space flight software (FSW) domain.},
  isbn = {978-1-4503-0445-0},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\R6NN4WT9\\Fant - 2011 - Building domain specific software architectures fr.pdf}
}

@inproceedings{fantSoftwareProductLine2012,
  title = {Software Product Line Engineering of Space Flight Software},
  booktitle = {2012 {{Third International Workshop}} on {{Product LinE Approaches}} in {{Software Engineering}} ({{PLEASE}})},
  author = {Fant, Julie Street and Gomaa, Hassan and Pettit, Robert G.},
  year = {2012},
  month = jun,
  pages = {41--44},
  publisher = {{IEEE}},
  address = {{Zurich, Switzerland}},
  doi = {10.1109/PLEASE.2012.6229769},
  abstract = {This paper presents a practical solution to a reallife industrial problem in the unmanned space flight software (FSW) domain using software product lines and software architectural design patterns. In the FSW domain, there exists a significant amount of variability in the required capabilities. For example, some FSW have a significant amount of hardware to control and operate in a nearly autonomous fashion. In contrast, other FSW have a small amount of hardware to control and rely heavily of commanding from the ground station to operate the spacecraft. The underlying architecture and component interactions needed for the different FSWs are quite different. This amount of architectural variability makes it difficult to develop a SPL architecture that covers the all possible variability in the FSW domain. Therefore, this paper presents a practical solution to this real world problem that leverages software product line concepts and software architectural design patterns.},
  isbn = {978-1-4673-1751-1 978-1-4673-1750-4},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\XGDYHJUH\\Fant et al. - 2012 - Software product line engineering of space flight .pdf}
}

@inproceedings{fariasDistributedTestAgents2012a,
  title = {Distributed Test Agents: A Pattern for the Development of Automatic System Tests for Distributed Applications},
  shorttitle = {Distributed Test Agents},
  booktitle = {Proceedings of the 9th {{Latin-American Conference}} on {{Pattern Languages}} of {{Programming}} - {{SugarLoafPLoP}} '12},
  author = {Farias, Giovanni and Dantas, Ayla and Lopes, Raquel and Guerrero, Dalton},
  year = {2012},
  pages = {1--11},
  publisher = {{ACM Press}},
  address = {{Natal, Rio Grande do Norte, Brazil}},
  doi = {10.1145/2591028.2600817},
  isbn = {978-1-4503-2787-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\EDNET65V\\Farias et al. - 2012 - Distributed test agents a pattern for the develop.pdf}
}

@inproceedings{fernandezTwoSecurityPatterns2011a,
  title = {Two Security Patterns: Least Privilege and Security Logger and Auditor},
  shorttitle = {Two Security Patterns},
  booktitle = {Proceedings of the 2nd {{Asian Conference}} on {{Pattern Languages}} of {{Programs}} - {{AsianPLoP}} '11},
  author = {Fernandez, Eduardo B. and Mujica, Sergio and Valenzuela, Francisca},
  year = {2011},
  pages = {1--6},
  publisher = {{ACM Press}},
  address = {{Tokyo, Japan}},
  doi = {10.1145/2524629.2524638},
  abstract = {We present here two security patterns that describe fundamental aspects: Least Privilege-- How can we minimize misuses by the users or workers of an institution? Give the users or the executing processes of a system the rights they need to perform their functions and no more. Security Logger/Auditor-- How can we keep track of user's actions in order to determine who did what and when? Log all security-sensitive actions performed by users and provide controlled access to records for Audit purposes.},
  isbn = {978-1-4503-2109-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\E75F9MQ9\\Fernandez et al. - 2011 - Two security patterns least privilege and securit.pdf}
}

@inproceedings{fernandezTwoSecurityPatterns2011a,
  title = {Two Security Patterns: Least Privilege and Security Logger and Auditor},
  shorttitle = {Two Security Patterns},
  booktitle = {Proceedings of the 2nd {{Asian Conference}} on {{Pattern Languages}} of {{Programs}} - {{AsianPLoP}} '11},
  author = {Fernandez, Eduardo B. and Mujica, Sergio and Valenzuela, Francisca},
  year = {2011},
  pages = {1--6},
  publisher = {{ACM Press}},
  address = {{Tokyo, Japan}},
  doi = {10.1145/2524629.2524638},
  abstract = {We present here two security patterns that describe fundamental aspects: Least Privilege-- How can we minimize misuses by the users or workers of an institution? Give the users or the executing processes of a system the rights they need to perform their functions and no more. Security Logger/Auditor-- How can we keep track of user's actions in order to determine who did what and when? Log all security-sensitive actions performed by users and provide controlled access to records for Audit purposes.},
  isbn = {978-1-4503-2109-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\E75F9MQ9\\Fernandez et al. - 2011 - Two security patterns least privilege and securit.pdf}
}
@inproceedings{fernandezEvenMorePatterns2006b,
  title = {Even More Patterns for Secure Operating Systems},
  booktitle = {Proceedings of the 2006 Conference on {{Pattern}} Languages of Programs - {{PLoP}} '06},
  author = {Fernandez, Eduardo B. and Sorgente, Tami and {Larrondo-Petrie}, Maria M.},
  year = {2006},
  pages = {1},
  publisher = {{ACM Press}},
  address = {{Portland, Oregon}},
  doi = {10.1145/1415472.1415484},
  abstract = {An operating system (OS) interacts with the hardware and supports the execution of all the applications. As a result, its security is very critical. Many of the reported attacks to Internetbased systems have occurred through the OS (kernel and utilities). The security of individual execution time actions such as process creation, memory protection, and the general architecture of the OS are very important and we have previously presented patterns for these functions. We present here patterns for the representation of processes and threads, emphasizing their security aspects. Another pattern considers the selection of virtual address space structure. We finally present a pattern to control the power of administrators, a common source of security problems.},
  isbn = {978-1-60558-372-3},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\DMV4G2AZ\\Fernandez et al. - 2006 - Even more patterns for secure operating systems.pdf}
}

@inproceedings{ferreiraPatternsDataMetadata2008a,
  title = {Patterns for Data and Metadata Evolution in Adaptive Object-Models},
  booktitle = {Proceedings of the 15th {{Conference}} on {{Pattern Languages}} of {{Programs}} - {{PLoP}} '08},
  author = {Ferreira, Hugo Sereno and Correia, Filipe Figueiredo and Welicki, Leon},
  year = {2008},
  pages = {1},
  publisher = {{ACM Press}},
  address = {{Nashville, Tennessee}},
  doi = {10.1145/1753196.1753203},
  abstract = {An Adaptive Object-Model (AOM) is an architectural pattern based upon a dynamic meta-modeling technique where the object model of the system is explicitly defined as data to be interpreted at run-time. The object model encompasses the full specification of domain objects, states, events, conditions, constraints and business rules. Several design patterns, that have before been documented, describe a set of good-practices within this domain. This paper approaches data and metadata evolution issues in the context of AOMs, by describing three additional patterns \textemdash{} History of Operations, System Memento and Migration. They establish ways to track, version, and evolve information, at the several abstraction levels that may exist in an AOM.},
  isbn = {978-1-60558-151-4},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\QA7SCKQW\\Ferreira et al. - 2008 - Patterns for data and metadata evolution in adapti.pdf}
}

@inproceedings{gomaaDynamicSelfadaptationDistributed2012,
  title = {Dynamic Self-Adaptation for Distributed Service-Oriented Transactions},
  booktitle = {2012 7th {{International Symposium}} on {{Software Engineering}} for {{Adaptive}} and {{Self-Managing Systems}} ({{SEAMS}})},
  author = {Gomaa, Hassan and Hashimoto, Koji},
  year = {2012},
  month = jun,
  pages = {11--20},
  publisher = {{IEEE}},
  address = {{Zurich, Switzerland}},
  doi = {10.1109/SEAMS.2012.6224386},
  abstract = {Dynamic software adaptation addresses software systems that need to change their behavior during execution. To address reuse in dynamic software adaptation, software adaptation patterns, also referred to as software reconfiguration patterns, have been developed. A software adaptation pattern defines how a set of components that make up an architecture or design pattern dynamically cooperate to change the software configuration to a new configuration given a set of adaptation commands. This paper describes a dynamic self-adaptation pattern for distributed transaction management in service-oriented applications.},
  isbn = {978-1-4673-1787-0 978-1-4673-1788-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\HNIILFQX\\Gomaa et Hashimoto - 2012 - Dynamic self-adaptation for distributed service-or.pdf}
}

@inproceedings{gomaaSoftwareAdaptationPatterns2010,
  title = {Software Adaptation Patterns for Service-Oriented Architectures},
  booktitle = {Proceedings of the 2010 {{ACM Symposium}} on {{Applied Computing}} - {{SAC}} '10},
  author = {Gomaa, Hassan and Hashimoto, Koji and Kim, Minseong and Malek, Sam and Menasc{\'e}, Daniel A.},
  year = {2010},
  pages = {462},
  publisher = {{ACM Press}},
  address = {{Sierre, Switzerland}},
  doi = {10.1145/1774088.1774185},
  abstract = {This paper describes the concept of software adaptation patterns and how they can be used in software adaptation of serviceoriented architectures. The patterns are described in terms of a three-layer architecture for self-management. A software adaptation pattern defines how a set of components that make up an architecture pattern dynamically cooperate to change the software configuration to a new configuration. In our approach, adaptation connectors are introduced to encapsulate adaptation state machine models so that the adaptation patterns can be more reusable. A change management model for dynamically evolving service-oriented applications is also described with a case study.},
  isbn = {978-1-60558-639-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\7ELFS84T\\Gomaa et al. - 2010 - Software adaptation patterns for service-oriented .pdf}
}


@article{harrisonArchitecturePatternsWebb,
  title = {Architecture {{Patterns}} of {{Web Services Applications}}},
  author = {Harrison, Neil B},
  pages = {15},
  abstract = {With the advent of web services platforms, the architectures of applications deployed on these platforms have evolved from architectures found in early software systems. A study of reference architectures provided by Amazon Web Services showed eight architecture patterns. These patterns are similar to the original software architecture patterns, but they may be sufficiently different to be considered separate patterns in their own right. If they are not new patterns, it is still worthwhile to document them as modern uses of legacy architecture patterns. This paper briefly describes the patterns found and gives their frequency. It also describes three of the web services architecture patterns in detail.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\FNTTCLFF\\Harrison - Architecture Patterns of Web Services Applications.pdf}
}

@inproceedings{hassoHassoCarlson20132013,
  title = {Hasso et {{Carlson}} - 2013 - {{Design}} Patterns as First-Class Connectors.Pdf},
  booktitle = {Proceedings of the 2nd Annual Conference on {{Research}} in Information Technology},
  author = {Hasso, Sargon and Carlson, Carl},
  year = {2013},
  month = oct,
  pages = {1--7},
  publisher = {{ACM}},
  address = {{Orlando, Florida, USA}},
  doi = {10.1145/2512209.2512219},
  isbn = {978-1-4503-2494-6},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\RYCBIDEG\\Hasso et Carlson - 2013 - Design patterns as first-class connectors.pdf}
}


@inproceedings{jonesDimensionalModelingIdentifying2005,
  title = {Dimensional Modeling: Identifying, Classifying \& Applying Patterns},
  shorttitle = {Dimensional Modeling},
  booktitle = {Proceedings of the 8th {{ACM}} International Workshop on {{Data}} Warehousing and {{OLAP}}  - {{DOLAP}}},
  author = {Jones, Mary Elizabeth and Song, Il-Yeol},
  year = {2005},
  pages = {29},
  publisher = {{ACM Press}},
  address = {{Bremen, Germany}},
  doi = {10.1145/1097002.1097008},
  abstract = {Software design is a complex activity. A successful designer requires knowledge and training in specific design techniques combined with practical experience. Designing a dimensional model embodies this challenge. This paper presents Dimensional Design Patterns (DDPs) and their applications to the design of dimensional models. We describe a metamodel of the DDPs and show their integration into Kimball's dimensional modeling design process so they can be applied to design problems using a known practice. By providing a metamodel and a method for DDP use, we combine theory and a practical design technique with the goal of increasing the efficiency and effectiveness of the software designer. The initial experimental results regarding the classroom use of DDPs revealed a significant increase in the efficiency of students to design a dimensional model, but more testing is necessary in order to evaluate the effectiveness measure.},
  isbn = {978-1-59593-162-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\PB3TDNFC\\Jones et Song - 2005 - Dimensional modeling identifying, classifying & a.pdf}
}




%%%%%%% Primary studies collected from the IEEE xplore Library %%%%%%%%%%%%%%%%%%%%%%%

@inproceedings{abeywickramaSimulatingArchitecturalPatterns2012,
  title = {Towards {{Simulating Architectural Patterns}} for {{Self-Aware}} and {{Self-Adaptive Systems}}},
  booktitle = {2012 {{IEEE Sixth International Conference}} on {{Self-Adaptive}} and {{Self-Organizing Systems Workshops}}},
  author = {Abeywickrama, Dhaminda B. and Zambonelli, Franco and Hoch, Nicklas},
  year = {2012},
  month = sep,
  pages = {133--138},
  publisher = {{IEEE}},
  address = {{Lyon, France}},
  doi = {10.1109/SASOW.2012.31},
  abstract = {Novel models and tools are required to support the engineering of systems that are self-aware of their current situations and capable of dynamically modifying their behavior and structure using feedback loops. In this paper, with the help of a case study in the area of e-mobility and based on our past work in self-adaptive systems modeling, we introduce a new tool (i.e., an Eclipse-based simulation plug-in) that we are developing for engineering and simulating architectural patterns based on feedback loops. Our plug-in can facilitate modeling of self-adaptive patterns using UML 2, visual animation of behavior to expose run-time information, animating composite structure, model-level debugging, simulating eventdriven models, and run-time prompting.},
  isbn = {978-0-7695-4895-1 978-1-4673-5153-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\IE2LRXPA\\Abeywickrama et al. - 2012 - Towards Simulating Architectural Patterns for Self.pdf}
}

@inproceedings{aliApplyingSecurityPatterns2018,
  title = {Applying Security Patterns for Authorization of Users in {{IoT}} Based Applications},
  booktitle = {2018 {{International Conference}} on {{Engineering}} and {{Emerging Technologies}} ({{ICEET}})},
  author = {Ali, Ishfaq and Asif, Muhammad},
  year = {2018},
  month = feb,
  pages = {1--5},
  publisher = {{IEEE}},
  address = {{Lahore}},
  doi = {10.1109/ICEET1.2018.8338648},
  abstract = {Internet of things (IoT) provides services which are environmentally event-driven. IoT provides sensing services of the physical environment to the information space, which is Event driven in common practice. For the development of IoT based application Software engineers need to assess the sensitivity of the data perceived by the physical devices. Commonly security is taken as a nonfunctional requirement but security requirements are as critical as other requirements. Authorization is one of the properties of security which is critical in context to Event Driven i.e. authorization of events and authorization of event generating devices. This research describes eight security patterns Documentation of Security Goal Pattern, Choose the Right Stuff, Third Party Enrollment Pattern, Reference Monitor pattern, Access matrix authorization rules, Role Based Access Control, Remote Authenticator/Authorizer, for authentication of the users, events and event generating devices to ensure its privilege to be in the system and perform actions.},
  isbn = {978-1-5386-3205-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\LL9T5AFY\\Ali et Asif - 2018 - Applying security patterns for authorization of us.pdf}
}

@inproceedings{babanezhadProcessPatternsWeb2010,
  title = {Process {{Patterns}} for {{Web Engineering}}},
  booktitle = {2010 {{IEEE}} 34th {{Annual Computer Software}} and {{Applications Conference}}},
  author = {Babanezhad, Reza and Bibalan, Yusef Mehrdad and Ramsin, Raman},
  year = {2010},
  month = jul,
  pages = {477--486},
  publisher = {{IEEE}},
  address = {{Seoul, Korea (South)}},
  doi = {10.1109/COMPSAC.2010.55},
  abstract = {Web Engineering has been enriched with processes and modeling languages that focus on the specific features of web-based systems, taking into account the special requirements and constraints that are associated with this specific context.},
  isbn = {978-1-4244-7512-4},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\SXR3XXBU\\Babanezhad et al. - 2010 - Process Patterns for Web Engineering.pdf}
}

@inproceedings{bernardiModelCheckingImprove2015,
  title = {Model {{Checking}} to {{Improve Precision}} of {{Design Pattern Instances Identification}} in {{OO Systems}}:},
  shorttitle = {Model {{Checking}} to {{Improve Precision}} of {{Design Pattern Instances Identification}} in {{OO Systems}}},
  booktitle = {Proceedings of the 10th {{International Conference}} on {{Software Paradigm Trends}}},
  author = {Bernardi, Mario L. and Cimitile, Marta and De Ruvo, Giuseppe and Di Lucca, Giuseppe A. and Santone, Antonella},
  year = {2015},
  pages = {53--63},
  publisher = {{SCITEPRESS - Science and and Technology Publications}},
  address = {{Colmar, Alsace, France}},
  doi = {10.5220/0005520500530063},
  isbn = {978-989-758-115-1},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\DVFNH992\\Bernardi et al. - 2015 - Model Checking to Improve Precision of Design Patt.pdf}
}

@article{dubininSemanticsRobustDesignPatterns2012,
  title = {Semantics-{{Robust Design Patterns}} for {{IEC}} 61499},
  author = {Dubinin, Victor N. and Vyatkin, Valeriy},
  year = {2012},
  month = may,
  journal = {IEEE Transactions on Industrial Informatics},
  volume = {8},
  number = {2},
  pages = {279--290},
  issn = {1551-3203, 1941-0050},
  doi = {10.1109/TII.2012.2186820},
  abstract = {The international standard IEC 61499 for the design of distributed industrial control systems defines an abstract model of function blocks (FB) which allows many different semantic interpretations. As a consequence, in addition, so-called execution models were proposed to specify the execution order of FBs. The variety of models leads to the incompatibility of tools and hinders the portability of automation software. To achieve a degree of execution model independence, in this paper, design patterns are suggested that make FB systems-robust to changes of execution semantics. A semantic-robust pattern is defined for a particular source execution model. The patterns themselves are implemented by means of the FB apparatus and therefore are fairly universal. The patterns can be defined and implemented using the FB transformations expressed in terms of Attributed Graph Grammars.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\GRRMI2WT\\Dubinin et Vyatkin - 2012 - Semantics-Robust Design Patterns for IEC 61499.pdf}
}

@inproceedings{durandSecuringDataverseAdapted2017,
  title = {Securing {{Dataverse}} with an {{Adapted Command Design Pattern}}},
  booktitle = {2017 {{IEEE Cybersecurity Development}} ({{SecDev}})},
  author = {Durand, Gustavo and {Bar-Sinai}, Michael and Crosas, Merce},
  year = {2017},
  month = sep,
  pages = {54--60},
  publisher = {{IEEE}},
  address = {{Cambridge, MA, USA}},
  doi = {10.1109/SecDev.2017.22},
  abstract = {In order to bake security into application design, we introduce an adaptation to the Command pattern: command instances are tagged with the permissions required to perform them for each object they manipulate. Prior to executing a command instance issued by a given user, an execution engine validates the user has the required permissions over the objects the command is about to operate on. Stating the required permissions can often be declarative. In addition to the usual advantages offered by the command pattern (such as standardized operation handling), this adaptation creates a single checkpoint for validating permissions throughout the application. This, in turn, enhances application security and reduces code duplication, for example between the API and UI controllers. Disadvantages include the lack of framework support, and a learning curve for existing developers. We have used this design in implementing Dataverse, a widely-used institutional data repository developed at Harvard University, which has been in production use since May 2015. As this design differs significantly from common web application design, we also look at how the development team adapted to it, and at how using it affected our development process.},
  isbn = {978-1-5386-3467-7},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\ETULY38A\\Durand et al. - 2017 - Securing Dataverse with an Adapted Command Design .pdf}
}

@inproceedings{fahmidehProcessPatternsServiceoriented2011,
  title = {Process Patterns for Service-Oriented Software Development},
  booktitle = {2011 {{FIFTH INTERNATIONAL CONFERENCE ON RESEARCH CHALLENGES IN INFORMATION SCIENCE}}},
  author = {Fahmideh, Mahdi and Sharifi, Mohsen and Jamshidi, Pooyan and Shams, Fereidoon and Haghighi, Hassan},
  year = {2011},
  month = may,
  pages = {1--9},
  publisher = {{IEEE}},
  address = {{Gosier, France}},
  doi = {10.1109/RCIS.2011.6006856},
  abstract = {Software systems development nowadays has moved towards dynamic composition of services that run on distributed infrastructures aligned with continuous changes in the system requirements. Consequently, software developers need to tailor project specific methodologies to fit their methodology requirements. Process patterns present a suitable solution by providing reusable method chunks of software development methodologies for constructing methodologies to fit specific requirements. In this paper, we propose a set of high-level service-oriented process patterns that can be used for constructing and enhancing situational service-oriented methodologies. We show how these patterns are used to construct a specific service-oriented methodology for the development of a sample system.},
  isbn = {978-1-4244-8670-0},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\9J9EEYZS\\Fahmideh et al. - 2011 - Process patterns for service-oriented software dev.pdf}
}


@inproceedings{fantPatternBasedModelingApproach2013,
  title = {A {{Pattern-Based Modeling Approach}} for {{Software Product Line Engineering}}},
  booktitle = {2013 46th {{Hawaii International Conference}} on {{System Sciences}}},
  author = {Fant, Julie Street and Gomaa, Hassan and Pettit, Robert G.},
  year = {2013},
  month = jan,
  pages = {4985--4994},
  publisher = {{IEEE}},
  address = {{Wailea, HI, USA}},
  doi = {10.1109/HICSS.2013.52},
  abstract = {This paper addresses the problem of variability in software product line (SPL) engineering by first considering different SPL model-based approaches and in particular the tradeoff between the development effort in domain engineering vs. application engineering. The paper then describes a SPL engineering approach, which is both model-based, and pattern-based. This approach bases the SPL software architecture on software architectural patterns and relates these patterns to SPL features. The paper describes how this approach has been applied to an unmanned space flight SPL.},
  isbn = {978-1-4673-5933-7 978-0-7695-4892-0},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\8IRIAFRL\\Fant et al. - 2013 - A Pattern-Based Modeling Approach for Software Pro.pdf}
}

@inproceedings{fayadUnifiedSoftwareEngineering2016,
  title = {Unified {{Software Engineering Reuse}} ({{USER}}) Using Stable Analysis, Design and Architectural Patterns},
  booktitle = {2016 {{Future Technologies Conference}} ({{FTC}})},
  author = {Fayad, Mohamed E. and Flood, Charles A.},
  year = {2016},
  month = dec,
  pages = {706--711},
  publisher = {{IEEE}},
  address = {{San Francisco, CA, USA}},
  doi = {10.1109/FTC.2016.7821682},
  abstract = {The endless pursuit for creating effective systems for software reuse has continued for as long as software has existed. To date, there have been few, if any, such effective systems created for ensuring a high degree of reusability from one project to the next. The inherent tendency for projects to demand substantial alterations, despite being designed for maximum reusability, remains strong evidence of this fact.},
  isbn = {978-1-5090-4171-8},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\3PDQ253Y\\Fayad et Flood - 2016 - Unified Software Engineering Reuse (USER) using st.pdf}
}

@inproceedings{frederickVULCANToolAutomatically2008,
  title = {{{VULCAN}}: {{A Tool}} for {{Automatically Generating Code}} from {{Design Patterns}}},
  shorttitle = {{{VULCAN}}},
  booktitle = {2008 2nd {{Annual IEEE Systems Conference}}},
  author = {Frederick, George and Bond, Pat and Tilley, Scott},
  year = {2008},
  month = apr,
  pages = {1--4},
  publisher = {{IEEE}},
  address = {{Montreal, QC, Canada}},
  doi = {10.1109/SYSTEMS.2008.4519012},
  abstract = {This paper presents a prototype tool called VULCAN that aims to assist with the creation ofhigh quality code through the use of design patterns. This tool comes in the form ofa plug-in for the popular Eclipse software development environment. VULCAN facilitates high quality code creation through the automatic generation of design pattern code templates, customized with user input, and integrated into pre-existing projects. This paper also provides a description of the tool VULCAN and its implementation. By automating the design pattern generation process through the application of a practical and easily usable tool, the adoption of a model-driven engineering approach using design patterns can be substantially mitigated, resulting in improved system quality.},
  isbn = {978-1-4244-2149-7 978-1-4244-2150-3},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\54DANQZ3\\Frederick et al. - 2008 - VULCAN A Tool for Automatically Generating Code f.pdf}
}

@inproceedings{garcia-holgadoArchitecturalPatternDefinition2014,
  title = {Architectural Pattern for the Definition of {{eLearning}} Ecosystems Based on {{Open Source}} Developments},
  booktitle = {2014 {{International Symposium}} on {{Computers}} in {{Education}} ({{SIIE}})},
  author = {{Garcia-Holgado}, Alicia and {Garcia-Penalvo}, Francisco Jose},
  year = {2014},
  month = nov,
  pages = {93--98},
  publisher = {{IEEE}},
  address = {{Logrono, La Rioja, Spain}},
  doi = {10.1109/SIIE.2014.7017711},
  abstract = {The huge penetration of technological ecosystems based on Open Source software, as a technological solution to support the knowledge management of entities and institutions, presents new problems in the development and integration of new software components. The aim of this paper has been to define an architectural pattern that lays the foundations to define and implement eLearning ecosystems. The pattern definition has been realized from a comparative analysis of the Strengths, Weaknesses, Opportunities and Threats of a number of real case studies developed in different contexts. As a result, we have obtained an architectural pattern composed by several layers and a set of external elements that provides a solution to the main problems identified in the development of technological ecosystems. The pattern has been tested in a real context, concretely in the Public Administration, its which has demonstrated that works properly.},
  isbn = {978-1-4799-4428-6},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\F6LT9IFK\\Garcia-Holgado et Garcia-Penalvo - 2014 - Architectural pattern for the definition of eLearn.pdf}
}

@inproceedings{gokmenStereotypesDesignPatterns2021,
  title = {Stereotypes as {{Design Patterns}} for {{Serious Games}} to {{Enhance Software Comprehension}}},
  booktitle = {2021 {{IEEE Conference}} on {{Games}} ({{CoG}})},
  author = {Gokmen, Rene and Heidrich, David and Schreiber, Andreas and Bichlmeier, Christoph},
  year = {2021},
  month = aug,
  pages = {1--3},
  publisher = {{IEEE}},
  address = {{Copenhagen, Denmark}},
  doi = {10.1109/CoG52621.2021.9619060},
  abstract = {Stereotypes support a high-level software comprehension by implying roles and responsibilities of classes in software systems. We propose the idea of using stereotypes as design patterns for serious games to enhance object oriented software comprehension. These design patterns can reduce the complexity of software systems and encode software knowledge into game mechanics. We provide examples of possible game mechanics and discuss the application of the proposed design patterns.},
  isbn = {978-1-66543-886-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\FFYBKW45\\Gokmen et al. - 2021 - Stereotypes as Design Patterns for Serious Games t.pdf}
}

@inproceedings{huangDevelopingNovelDesign2010,
  title = {Developing Novel Design Patterns in Information Visualization for Mobile Health Systems},
  booktitle = {2010 3rd {{International Conference}} on {{Biomedical Engineering}} and {{Informatics}}},
  author = {Huang, JianYuan and Li, Ye and Zhang, JingMeng and Yu, JianYe},
  year = {2010},
  month = oct,
  pages = {2748--2752},
  publisher = {{IEEE}},
  address = {{Yantai, China}},
  doi = {10.1109/BMEI.2010.5639813},
  isbn = {978-1-4244-6498-2 978-1-4244-6495-1 978-1-4244-6497-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\LWSDBED4\\Huang et al. - 2010 - Developing novel design patterns in information vi.pdf}
}








%%%%%%% Primary studies collected from the Google Scholar Library %%%%%%%%%%%%%%%%%%%%%%%

@article{bensaidMDEbasedApproachSelfadaptive2020,
  title = {An {{MDE-based}} Approach for Self-Adaptive {{RTES}} Model Generation},
  author = {Ben Said, Mouna and Hadj Kacem, Yessine and Kerboeuf, Micka{\"e}l and Abid, Mohamed},
  year = {2020},
  month = jun,
  journal = {Cluster Computing},
  volume = {23},
  number = {2},
  pages = {925--951},
  issn = {1386-7857, 1573-7543},
  doi = {10.1007/s10586-019-02968-4},
  abstract = {Raising the design abstraction level has been, since many years, a prominent solution to decrease the complexity of selfadaptive real time embedded systems (RTES) and increase productivity. However, the manual specification and integration of the adaptive behavior into the system model is still presenting a big handicap for designers. There is a lack of Computer Aided Software Engineering tools and methodologies that permit to automate the generation of self-adaptive RTES models. Therefore, designers need an expertise in the adaptation domain as well as the modeling language and much time for manual work. At the aim of solving these problems, we propose, in this paper, a Model Driven Engineering based approach that permits to guide the automatic transformation of a classic Y-chart RTES model into a self-adaptive model based on design patterns. A model-based interactive process is developed to enable the generation of self-adaptive models for RTES based on the instantiation, integration and specialization of design patterns. The generated system model is then mapped to the input of a simulation platform in order to perform the non-functional properties verification and simulate the system reconfiguration, if needed. The proposed approach is tested and validated through a case study of an embedded video conferencing system which is CPU and network bandwidth-constrained.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\7NGL3HZN\\Ben Said et al. - 2020 - An MDE-based approach for self-adaptive RTES model.pdf}
}

@article{bensaidDesignPatternsSelfAdaptive2014,
  title = {Design {{Patterns}} for {{Self-Adaptive RTE Systems Specification}}},
  author = {Ben Said, Mouna and Hadj Kacem, Yessine and Kerboeuf, Micka{\"e}l and Ben Amor, Nader and Abid, Mohamed},
  year = {2014},
  journal = {International Journal of Reconfigurable Computing},
  volume = {2014},
  pages = {1--21},
  issn = {1687-7195, 1687-7209},
  doi = {10.1155/2014/536362},
  abstract = {The development of self-adaptive real-time embedded (RTE) systems is an increasingly hard task due to the growing complexity of both hardware and software and the high variability of the execution environment. Different approaches, platforms, and middleware have been proposed in the field, from low to high abstraction level. However, there is still a lack of generic and reusable designs for self-adaptive RTE systems that fit different system domains, lighten designers' task, and decrease development cost. In this paper, we propose five design patterns for self-adaptive RTE systems modeling resulting from the generalization of relevant existing adaptation-related works. Combined together, the patterns form the design of an adaptation loop composed of five adaptation modules. The proposed solution offers a modular, reusable, and flexible specification of these modules and enables the separation of concerns. It also permits dealing with concurrency, real-time features, and adaptation cost relative to the adaptation activities. To validate our solution, we applied it to a complex case study, a cross-layer self-adaptive object tracking system, to show patterns utilization and prove the solution benefits.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\INL8UPTY\\Ben Said et al. - 2014 - Design Patterns for Self-Adaptive RTE Systems Spec.pdf}
}

@inproceedings{bouazizApplyingSecurityPatterns2012,
  title = {Applying {{Security Patterns}} for {{Component Based Applications Using UML Profile}}},
  booktitle = {2012 {{IEEE}} 15th {{International Conference}} on {{Computational Science}} and {{Engineering}}},
  author = {Bouaziz, Rahma and Coulette, Bernard},
  year = {2012},
  month = dec,
  pages = {186--193},
  publisher = {{IEEE}},
  address = {{Paphos, Cyprus}},
  doi = {10.1109/ICCSE.2012.104},
  abstract = {Today's systems require a higher consideration for non functional requirements as security and dependability. Developers have to handle these requirements during software development lifecycle. To provide developers with security guidelines, security patterns were proposed. These patterns are a collection of experts' security knowledge and a good solution to convey security concepts. In order to encourage developers to take advantage from security solutions proposed by security patterns, we think that it is necessary to provide an appropriate mechanism to implement those patterns using UML profiles. In this paper, we propose a structured UML profiles construction process based on security patterns. An illustration of the proposed process is provided using the ``active replication'' pattern. A case study of GPS system is also provided to demonstrate the application of generated UML profile using the proposed process.},
  isbn = {978-1-4673-5165-2 978-0-7695-4914-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\KK54BYHL\\Bouaziz et Coulette - 2012 - Applying Security Patterns for Component Based App.pdf}
}

@inproceedings{bouazizEngineeringProcessSecurity2013,
  title = {An {{Engineering Process}} for {{Security Patterns Application}} in {{Component Based Models}}},
  booktitle = {2013 {{Workshops}} on {{Enabling Technologies}}: {{Infrastructure}} for {{Collaborative Enterprises}}},
  author = {Bouaziz, Rahma and Kallel, Slim and Coulette, Bernard},
  year = {2013},
  month = jun,
  pages = {231--236},
  publisher = {{IEEE}},
  address = {{Hammamet, Tunisia}},
  doi = {10.1109/WETICE.2013.27},
  abstract = {Security engineering with patterns is currently a very active area of research. Security patterns \'i an adaptation of Design Patterns to security \textendash{} capture experts' experience in order to solve recurrent security problems in a structured and reusable way. In this paper, our objective is to describe an engineering process, called SCRIP (SeCurity patteRn Integration Process), which provides guidelines for integrating security patterns into component-based models. SCRIP defines activities and products to integrate security patterns in the whole development process, from UML component modeling until aspect code generation. The definition of SCRIP has been made using the OMG standard Software and System Process Engineering Meta-model (SPEM). We are developing a CASE tool to support that process.},
  isbn = {978-1-4799-0405-1},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\J9NQ8HSG\\Bouaziz et al. - 2013 - An Engineering Process for Security Patterns Appli.pdf}
}

@article{favreImprovingMDAbasedProcess,
  title = {Improving {{MDA-based Process Quality}} through {{Refactoring Patterns}}},
  author = {Favre, Liliana and Pereira, Claudia},
  pages = {7},
  abstract = {The Model Driven Architecture (MDA) is an initiative proposed by the Object Management Group (OMG) that advocates modeling system from computation independent, platform independent, platform specific and implementation specific models. MDA is also based on the concepts of metamodel, automatic transformation and traceability. A crucial part of the evolution from abstract models to executable components or applications is accomplished by means of refactoring. In this paper we propose a refactoring specification based on patterns and metamodeling techniques. We describe foundations for MDA-based refactoring that allow extending the functionality of the existing CASE tools in order to improve the MDA-based process quality.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\UN5T2WE2\\Favre et Pereira - Improving MDA-based Process Quality through Refact.pdf}
}

@article{fukayaDesignPatternDetection,
  title = {Design {{Pattern Detection Using Source Code}} of {{Before Applying Design Patterns}}},
  author = {Fukaya, Kazuhiro and Kubo, Atsuto and Washizaki, Hironori and Fukazawa, Yoshiaki},
  pages = {3},
  abstract = {We propose an approach of design pattern detection using source-code of before the application of the design pattern. Our approach is able to distinguish different design patterns with similar structures, and help maintainers understand the design of the program more accurately. Moreover, our technique reveals when and where the target pattern has been applied. It is useful to assess what kinds of patterns increase what kinds of quality characteristics.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\IT8PP3W9\\Fukaya et al. - Design Pattern Detection Using Source Code of Befo.pdf}
}

@article{fushidaMethodInvestigateSoftware,
  title = {A {{Method}} to {{Investigate Software Evolutions Using Design Pattern Detection Tool}}},
  author = {Fushida, Kyohei and Kawaguchi, Shinji and Iida, Hajimu},
  pages = {6},
  abstract = {In software designing, design patterns are expected to help for implementing with clear design intention with higher quality. However, selecting appropriate patterns is not simple task, and design patterns are sometimes deployed exploratory without properly defined process. In order to clarify design patterns' contribution to the quality and productivity, it is very important to investigate design pattern usage among the series of revisions over the time.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\L8KQC6I9\\Fushida et al. - A Method to Investigate Software Evolutions Using .pdf}
}

@book{gammaDesignPatternsElements1995,
  title = {Design Patterns: Elements of Reusable Object-Oriented Software},
  author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Johnson, Ralph E and Vlissides, John},
  year = {1995},
  publisher = {{Pearson Deutschland GmbH}},
  isbn = {0-201-63361-2}
}

@article{gaudelCompositionDesignPatterns2014,
  title = {Composition of Design Patterns: From the Modeling of {{RTOS}} Synchronization Tools to Schedulability Analysis},
  shorttitle = {Composition of Design Patterns},
  author = {Gaudel, Vincent and Singhoff, Frank and Plantec, Alain and Dissaux, Pierre and Legrand, J{\'e}r{\^o}me},
  year = {2014},
  month = feb,
  journal = {ACM SIGBED Review},
  volume = {11},
  number = {1},
  pages = {44--49},
  issn = {1551-3688},
  doi = {10.1145/2597457.2597463},
  abstract = {This article deals with performance verification of architecture models of real-time embedded systems. We investigate scheduling analysis of multi-tasks applications running on real-time operating systems (RTOS in this article). Scheduling analysis on these types of system can be performed with the real-time scheduling theory, but applying it is a complicated task. To allow designer to automatically apply this theory, we propose several architectural design patterns. Each architectural design pattern models a classical task synchronization or communication protocol available in RTOSes. In this article, we focus on those design patterns composition. We show how to compose the proposed design patterns and how scheduling analysis can be run with them.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\KJCHZ55G\\Gaudel et al. - 2014 - Composition of design patterns from the modeling .pdf}
}
@inproceedings{gomaaReusableComponentInterconnection2001,
  title = {Reusable Component Interconnection Patterns for Distributed Software Architectures},
  booktitle = {Proceedings of the 2001 Symposium on {{Software}} Reusability Putting Software Reuse in Context - {{SSR}} '01},
  author = {Gomaa, Hassan and Menasc{\'e}, Daniel A. and Shin, Michael E.},
  year = {2001},
  pages = {69--77},
  publisher = {{ACM Press}},
  address = {{Toronto, Ontario, Canada}},
  doi = {10.1145/375212.375252},
  abstract = {This paper investigates the design of reusable component interconnection in client/server systems. In particular, the paper describes the design of component interconnection patterns, which define and encapsulate the way client and server components communicate with each other. This paper uses the Unified Modeling Language (UML) to describe the component interconnection patterns for synchronous, asynchronous, and brokered communication. When designing a new distributed application, the appropriate component interaction patterns may then be selected and reused.},
  isbn = {978-1-58113-358-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\SJNWX3IW\\Gomaa et al. - 2001 - Reusable component interconnection patterns for di.pdf}
}

@article{jawawiSoftwareReuseMobile2007,
  title = {Software {{Reuse}} for {{Mobile Robot Applications Through Analysis Patterns}}},
  author = {Jawawi, Dayang and Deris, Safaai and Mamat, Rosbi},
  year = {2007},
  volume = {4},
  number = {3},
  pages = {9},
  abstract = {Software analysis pattern is an approach of software reuse which provides a way to reuse expertise that can be used across domains at early level of development. Developing software for a mobile robot system involves multi-disciplines expert knowledge which includes embedded systems, real-time software issues, control theories and artificial intelligence aspects. This paper focuses on analysis patterns as a means to facilitate mobile robot software knowledge reuse by capturing conceptual models in those domains in order to allow reuse across applications. The use of software analysis patterns as a means to facilitate Autonomous Mobile Robots (AMR) software knowledge reuse through component-based software engineering is proposed. The software analysis patterns for AMR were obtained through a pattern mining process, and documented using a standard catalogue template. These analysis patterns are categorized according to hybrid deliberate layered architecture of robot software: Reactive layer, supervisor layer and deliberative layer. Particularly, the analysis patterns in the reactive layer are highlighted and presented. The deployment of the analysis patterns are illustrated and discussed using an AMR software case study. To verify the existence of the pattern in AMR systems, pattern-based reverse engineering was performed on two existing AMR systems. The reuse potential of these patterns is evaluated by measuring the reusability of components in the analysis patterns.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\5H54K5AX\\Jawawi et al. - 2007 - Software Reuse for Mobile Robot Applications Throu.pdf}
}






%%%%%%%%%%%%%%%%%%%%%%%%%% Primary studies results of Snowballig (7 papers) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@article{belliniExpressingOrganizingRealtime2009,
  title = {Expressing and Organizing Real-Time Specification Patterns via Temporal Logics},
  author = {Bellini, P. and Nesi, P. and Rogai, D.},
  year = {2009},
  month = feb,
  journal = {Journal of Systems and Software},
  volume = {82},
  number = {2},
  pages = {183--196},
  issn = {01641212},
  doi = {10.1016/j.jss.2008.06.041},
  abstract = {Formal specification models provide support for the formal verification and validation of the system behaviour. This advantage is typically paid in terms of effort and time spent in learning and using formal methods and tools. The introduction and usage of patterns have a double impact. They stand for examples on how to cover classical problems with formal methods in many different notations, so that the user can shorten the time to understand if a formal method can be used to meet his purpose and how it can be used. Furthermore, they are used for shortening the specification time, by reusing and composing different patterns to cover the specification, thus producing more understandable specifications which refer to commonly known patterns. For these reasons, both interests in and usage of patterns are growing and a higher number of proposals for patterns and pattern classification/organisation has appeared in literature. This paper reports a review of the state of the art for real-time specification patterns, so as to organise them in a unified way, while providing some new patterns which complete the unified model. The proposed organization is based on some relationships among patterns as demonstrated in the paper. During the presentation the patterns have been formalised in TILCO-X, whereas in appendix a list of patterns with formalizations in several different logics such as TILCO, LTL, CTL, GIL, QRE, MTL, TCTL, RTGIL, is provided disguised as links to the locations where such formalizations can be recovered and/or are directly reported, if found not accessible in literature; this allows the reader to have a detailed view of all the classified patterns, including the ones already added. Furthermore, an example has been proposed to highlight the usefulness of the new identified patterns completing the unified model.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\9SSSSYAF\\Bellini et al. - 2009 - Expressing and organizing real-time specification .pdf}
}

@inproceedings{benmansourMARTEBasedDesignPattern2019,
  title = {A {{MARTE-Based Design Pattern}} for {{Adaptive Real-Time Embedded Systems}}:},
  shorttitle = {A {{MARTE-Based Design Pattern}} for {{Adaptive Real-Time Embedded Systems}}},
  booktitle = {Proceedings of the 14th {{International Conference}} on {{Evaluation}} of {{Novel Approaches}} to {{Software Engineering}}},
  author = {Ben Mansour, Ahmed and Naija, Mohamed and Ben Ahmed, Samir},
  year = {2019},
  pages = {242--248},
  publisher = {{SCITEPRESS - Science and Technology Publications}},
  address = {{Heraklion, Crete, Greece}},
  doi = {10.5220/0007673102420248},
  isbn = {978-989-758-375-9},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\8WKMI74L\\Ben Mansour et al. - 2019 - A MARTE-Based Design Pattern for Adaptive Real-Tim.pdf}
}

@inproceedings{armoushEffectivePatternRepresentation2008,
  title = {Effective {{Pattern Representation}} for {{Safety Critical Embedded Systems}}},
  booktitle = {2008 {{International Conference}} on {{Computer Science}} and {{Software Engineering}}},
  author = {Armoush, Ashraf and Salewski, Falk and Kowalewski, Stefan},
  year = {2008},
  pages = {91--97},
  publisher = {{IEEE}},
  address = {{Wuhan, China}},
  doi = {10.1109/CSSE.2008.739},
  abstract = {Design Patterns, which give abstract solutions to commonly recurring design problems, have been widely used in the software and hardware domain. This paper focuses on nonfunctional implications and side effects of the design patterns on safety critical applications, which are especially critical in embedded systems. We propose a pattern representation for safety critical embedded application design methods by including fields for the implications and side effects of the represented design pattern on the nonfunctional requirements of the safety critical applications. These requirements include safety, reliability, modifiability, cost, and execution time.},
  isbn = {978-0-7695-3336-0},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\E9ZKA5XH\\Armoush et al. - 2008 - Effective Pattern Representation for Safety Critic.pdf}
}

@inproceedings{konradRealtimeSpecificationPatterns2005,
  title = {Real-Time Specification Patterns},
  booktitle = {Proceedings. 27th {{International Conference}} on {{Software Engineering}}, 2005. {{ICSE}} 2005.},
  author = {Konrad, S. and Cheng, B.H.C.},
  year = {2005},
  pages = {372--381},
  publisher = {{IEEe}},
  address = {{St. Louis, MO, USA}},
  doi = {10.1109/ICSE.2005.1553580},
  abstract = {Embedded systems are pervasive and frequently used for critical systems with time-dependent functionality. Dwyer et al. have developed qualitative specification patterns to facilitate the specification of critical properties, such as those that must be satisfied by embedded systems. Thus far, no analogous repository has been compiled for realtime specification patterns. This paper makes two main contributions: First, based on an analysis of timing-based requirements of several industrial embedded system applications, we created real-time specification patterns in terms of three commonly used real-time temporal logics. Second, as a means to further facilitate the understanding of the meaning of a specification, we offer a structured English grammar that includes support for real-time properties. We illustrate the use of the real-time specification patterns in the context of property specifications of a real-world automotive embedded system.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\TT29J233\\Konrad et Cheng - 2005 - Real-time specification patterns.pdf}
}

@article{dwyerPatternsPropertySpecifications,
  title = {Patterns in {{Property Specifications}} for {{Finite-State Verification}}},
  author = {Dwyer, B and Avrunin, S and Corbett, James C},
  pages = {10},
  abstract = {Model checkers and other finite-state verification tools allow developers to detect certain kinds of errors automatically. Nevertheless, the transition of this technology from research to practice has been slow. While there are a number of potential causes for reluctance to adopt such formal methods, we believe that a primary cause is that practitioners are unfamiliar with specification processes, notations, and strategies. In a recent paper, we proposed a pattern-based approach to the presentation, codification and reuse of property specifications for finite-state verification. Since then, we have carried out a survey of available specifications, collecting over 500 examples of property specifications. We found that most are instances of our proposed patterns. Furthermore, we have updated our pattern system to accommodate new patterns and variations of existing patterns encountered in this survey. This paper reports the results of the survey and the current status of our pattern system.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\U3DHDXGS\\Dwyer et al. - Patterns in Property Specifications for Finite-Sta.pdf}
}

@incollection{mzidDPMPSoftwarePattern2013,
  title = {{{DPMP}}: {{A Software Pattern}} for {{Real-Time Tasks Merge}}},
  shorttitle = {{{DPMP}}},
  booktitle = {Modelling {{Foundations}} and {{Applications}}},
  author = {Mzid, Rania and Mraidha, Chokri and Mehiaoui, Asma and {Tucci-Piergiovanni}, Sara and Babau, Jean-Philippe and Abid, Mohamed},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Van Gorp, Pieter and Ritter, Tom and Rose, Louis M.},
  year = {2013},
  volume = {7949},
  pages = {101--117},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-39013-5_8},
  abstract = {In a model-driven development context, the refinement of the architectural model of a real-time application to a Real Time Operating System (RTOS) specific model is a challenging task. Indeed, the different design choices made to guarantee the application timing properties are not always implementable on the target RTOS. In particular, when the number of distinct priority levels used at the design level exceeds the number allowed by the RTOS for the considered application, this refinement becomes not possible. In this paper, we propose a software pattern called Distinct Priority Merge Pattern (DPMP) that automatically perform the re-factoring of the architectural model when this problem occurs. First, we give an heuristic algorithm describing this pattern and we show that this method is not always effective. Then, to address the limitations of the first method, we propose a MILP formulation of the DPMP pattern that allows to check whether a solution exists and gives the optimal one. The evaluation of the second method, allows to estimate a cost in terms of processor utilization increase during the deployment of an application on a given RTOS family characterized by the number of distinct priority levels that it offers.},
  isbn = {978-3-642-39012-8 978-3-642-39013-5},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\MWXFKVNI\\Mzid et al. - 2013 - DPMP A Software Pattern for Real-Time Tasks Merge.pdf}
}

@article{xuArchitecturalPatternNonfunctional,
  title = {An {{Architectural Pattern}} for {{Non-functional Dependability Requirements}}},
  author = {Xu, Lihua and Ziv, Hadar and Richardson, Debra and Alspaugh, Thomas A},
  pages = {6},
  abstract = {We address the research question of transforming dependability requirements into corresponding software architecture constructs, by proposing first that dependability needs can be classified into three types of requirements and second, an architectural pattern that allows requirements engineers and architects to map dependability requirements into three corresponding types of architectural components. The proposed pattern is general enough to work with existing requirements techniques and existing software architectural styles, including enterprise and product-line architectures.},
  langid = {english},
  file = {C\:\\Users\\ASUS\\Zotero\\storage\\2V3R6GNW\\Xu et al. - An Architectural Pattern for Non-functional Depend.pdf}
}



